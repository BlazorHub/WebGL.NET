//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WebIDL.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class WebIDLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, INTEGER_WEBIDL=80, 
		FLOAT_WEBIDL=81, IDENTIFIER_WEBIDL=82, STRING_WEBIDL=83, WHITESPACE_WEBIDL=84, 
		COMMENT_WEBIDL=85, OTHER_WEBIDL=86;
	public const int
		RULE_webIDL = 0, RULE_definitions = 1, RULE_definition = 2, RULE_callbackOrInterface = 3, 
		RULE_callbackRestOrInterface = 4, RULE_interface_ = 5, RULE_class_ = 6, 
		RULE_partial = 7, RULE_partialDefinition = 8, RULE_partialInterface = 9, 
		RULE_interfaceMembers = 10, RULE_interfaceMember = 11, RULE_dictionary = 12, 
		RULE_dictionaryMembers = 13, RULE_dictionaryMember = 14, RULE_required = 15, 
		RULE_partialDictionary = 16, RULE_default_ = 17, RULE_defaultValue = 18, 
		RULE_inheritance = 19, RULE_extension = 20, RULE_enum_ = 21, RULE_enumValueList = 22, 
		RULE_enumValueListComma = 23, RULE_enumValueListString = 24, RULE_callbackRest = 25, 
		RULE_typedef = 26, RULE_implementsStatement = 27, RULE_const_ = 28, RULE_constValue = 29, 
		RULE_booleanLiteral = 30, RULE_floatLiteral = 31, RULE_serializer = 32, 
		RULE_serializerRest = 33, RULE_serializationPattern = 34, RULE_serializationPatternMap = 35, 
		RULE_serializationPatternList = 36, RULE_stringifier = 37, RULE_stringifierRest = 38, 
		RULE_staticMember = 39, RULE_staticMemberRest = 40, RULE_readonlyMember = 41, 
		RULE_readonlyMemberRest = 42, RULE_readWriteAttribute = 43, RULE_attributeRest = 44, 
		RULE_attributeName = 45, RULE_attributeNameKeyword = 46, RULE_inherit = 47, 
		RULE_readOnly = 48, RULE_operation = 49, RULE_specialOperation = 50, RULE_specials = 51, 
		RULE_special = 52, RULE_operationRest = 53, RULE_optionalIdentifier = 54, 
		RULE_argumentList = 55, RULE_arguments = 56, RULE_argument = 57, RULE_optionalOrRequiredArgument = 58, 
		RULE_argumentName = 59, RULE_ellipsis = 60, RULE_iterable = 61, RULE_optionalType = 62, 
		RULE_readWriteMaplike = 63, RULE_readWriteSetlike = 64, RULE_maplikeRest = 65, 
		RULE_setlikeRest = 66, RULE_extendedAttributeList = 67, RULE_extendedAttributes = 68, 
		RULE_extendedAttribute = 69, RULE_extendedAttributeRest = 70, RULE_extendedAttributeInner = 71, 
		RULE_other = 72, RULE_argumentNameKeyword = 73, RULE_otherOrComma = 74, 
		RULE_type = 75, RULE_singleType = 76, RULE_unionType = 77, RULE_unionMemberType = 78, 
		RULE_unionMemberTypes = 79, RULE_nonAnyType = 80, RULE_bufferRelatedType = 81, 
		RULE_constType = 82, RULE_primitiveType = 83, RULE_unrestrictedFloatType = 84, 
		RULE_floatType = 85, RULE_unsignedIntegerType = 86, RULE_integerType = 87, 
		RULE_optionalLong = 88, RULE_promiseType = 89, RULE_null_ = 90, RULE_returnType = 91, 
		RULE_identifierList = 92, RULE_identifiers = 93, RULE_extendedAttributeNoArgs = 94, 
		RULE_extendedAttributeArgList = 95, RULE_extendedAttributeIdent = 96, 
		RULE_extendedAttributeIdentList = 97, RULE_extendedAttributeNamedArgList = 98;
	public static readonly string[] ruleNames = {
		"webIDL", "definitions", "definition", "callbackOrInterface", "callbackRestOrInterface", 
		"interface_", "class_", "partial", "partialDefinition", "partialInterface", 
		"interfaceMembers", "interfaceMember", "dictionary", "dictionaryMembers", 
		"dictionaryMember", "required", "partialDictionary", "default_", "defaultValue", 
		"inheritance", "extension", "enum_", "enumValueList", "enumValueListComma", 
		"enumValueListString", "callbackRest", "typedef", "implementsStatement", 
		"const_", "constValue", "booleanLiteral", "floatLiteral", "serializer", 
		"serializerRest", "serializationPattern", "serializationPatternMap", "serializationPatternList", 
		"stringifier", "stringifierRest", "staticMember", "staticMemberRest", 
		"readonlyMember", "readonlyMemberRest", "readWriteAttribute", "attributeRest", 
		"attributeName", "attributeNameKeyword", "inherit", "readOnly", "operation", 
		"specialOperation", "specials", "special", "operationRest", "optionalIdentifier", 
		"argumentList", "arguments", "argument", "optionalOrRequiredArgument", 
		"argumentName", "ellipsis", "iterable", "optionalType", "readWriteMaplike", 
		"readWriteSetlike", "maplikeRest", "setlikeRest", "extendedAttributeList", 
		"extendedAttributes", "extendedAttribute", "extendedAttributeRest", "extendedAttributeInner", 
		"other", "argumentNameKeyword", "otherOrComma", "type", "singleType", 
		"unionType", "unionMemberType", "unionMemberTypes", "nonAnyType", "bufferRelatedType", 
		"constType", "primitiveType", "unrestrictedFloatType", "floatType", "unsignedIntegerType", 
		"integerType", "optionalLong", "promiseType", "null_", "returnType", "identifierList", 
		"identifiers", "extendedAttributeNoArgs", "extendedAttributeArgList", 
		"extendedAttributeIdent", "extendedAttributeIdentList", "extendedAttributeNamedArgList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'callback'", "'interface'", "'{'", "'}'", "';'", "'class'", "'partial'", 
		"'dictionary'", "'required'", "'='", "'['", "']'", "':'", "'extends'", 
		"'enum'", "','", "'('", "')'", "'typedef'", "'implements'", "'const'", 
		"'null'", "'true'", "'false'", "'-Infinity'", "'Infinity'", "'NaN'", "'serializer'", 
		"'getter'", "'inherit'", "'stringifier'", "'static'", "'readonly'", "'attribute'", 
		"'setter'", "'deleter'", "'legacycaller'", "'optional'", "'...'", "'iterable'", 
		"'<'", "'>'", "'maplike'", "'setlike'", "'-'", "'.'", "'?'", "'ByteString'", 
		"'DOMString'", "'FrozenArray'", "'RegExp'", "'USVString'", "'any'", "'boolean'", 
		"'byte'", "'double'", "'float'", "'long'", "'object'", "'octet'", "'or'", 
		"'sequence'", "'short'", "'unsigned'", "'void'", "'unrestricted'", "'DOMException'", 
		"'ArrayBuffer'", "'DataView'", "'Int8Array'", "'Int16Array'", "'Int32Array'", 
		"'Uint8Array'", "'Uint16Array'", "'Uint32Array'", "'Uint8ClampedArray'", 
		"'Float32Array'", "'Float64Array'", "'Promise'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "INTEGER_WEBIDL", "FLOAT_WEBIDL", 
		"IDENTIFIER_WEBIDL", "STRING_WEBIDL", "WHITESPACE_WEBIDL", "COMMENT_WEBIDL", 
		"OTHER_WEBIDL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WebIDL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static WebIDLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WebIDLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WebIDLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class WebIDLContext : ParserRuleContext {
		public DefinitionsContext definitions() {
			return GetRuleContext<DefinitionsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(WebIDLParser.Eof, 0); }
		public WebIDLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_webIDL; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterWebIDL(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitWebIDL(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWebIDL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WebIDLContext webIDL() {
		WebIDLContext _localctx = new WebIDLContext(Context, State);
		EnterRule(_localctx, 0, RULE_webIDL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; definitions();
			State = 199; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionsContext : ParserRuleContext {
		public ExtendedAttributeListContext extendedAttributeList() {
			return GetRuleContext<ExtendedAttributeListContext>(0);
		}
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public DefinitionsContext definitions() {
			return GetRuleContext<DefinitionsContext>(0);
		}
		public DefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definitions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDefinitions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDefinitions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionsContext definitions() {
		DefinitionsContext _localctx = new DefinitionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_definitions);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__5:
			case T__6:
			case T__7:
			case T__10:
			case T__14:
			case T__18:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; extendedAttributeList();
				State = 202; definition();
				State = 203; definitions();
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public CallbackOrInterfaceContext callbackOrInterface() {
			return GetRuleContext<CallbackOrInterfaceContext>(0);
		}
		public PartialContext partial() {
			return GetRuleContext<PartialContext>(0);
		}
		public DictionaryContext dictionary() {
			return GetRuleContext<DictionaryContext>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public TypedefContext typedef() {
			return GetRuleContext<TypedefContext>(0);
		}
		public ImplementsStatementContext implementsStatement() {
			return GetRuleContext<ImplementsStatementContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_definition);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; callbackOrInterface();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; partial();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; dictionary();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 211; enum_();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 5);
				{
				State = 212; typedef();
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 213; implementsStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallbackOrInterfaceContext : ParserRuleContext {
		public CallbackRestOrInterfaceContext callbackRestOrInterface() {
			return GetRuleContext<CallbackRestOrInterfaceContext>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public CallbackOrInterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callbackOrInterface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterCallbackOrInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitCallbackOrInterface(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallbackOrInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallbackOrInterfaceContext callbackOrInterface() {
		CallbackOrInterfaceContext _localctx = new CallbackOrInterfaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_callbackOrInterface);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; Match(T__0);
				State = 217; callbackRestOrInterface();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; interface_();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; class_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallbackRestOrInterfaceContext : ParserRuleContext {
		public CallbackRestContext callbackRest() {
			return GetRuleContext<CallbackRestContext>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public CallbackRestOrInterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callbackRestOrInterface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterCallbackRestOrInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitCallbackRestOrInterface(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallbackRestOrInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallbackRestOrInterfaceContext callbackRestOrInterface() {
		CallbackRestOrInterfaceContext _localctx = new CallbackRestOrInterfaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_callbackRestOrInterface);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222; callbackRest();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; interface_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public InheritanceContext inheritance() {
			return GetRuleContext<InheritanceContext>(0);
		}
		public InterfaceMembersContext interfaceMembers() {
			return GetRuleContext<InterfaceMembersContext>(0);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(Context, State);
		EnterRule(_localctx, 10, RULE_interface_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(T__1);
			State = 227; Match(IDENTIFIER_WEBIDL);
			State = 228; inheritance();
			State = 229; Match(T__2);
			State = 230; interfaceMembers();
			State = 231; Match(T__3);
			State = 232; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ExtensionContext extension() {
			return GetRuleContext<ExtensionContext>(0);
		}
		public InterfaceMembersContext interfaceMembers() {
			return GetRuleContext<InterfaceMembersContext>(0);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(Context, State);
		EnterRule(_localctx, 12, RULE_class_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(T__5);
			State = 235; Match(IDENTIFIER_WEBIDL);
			State = 236; extension();
			State = 237; Match(T__2);
			State = 238; interfaceMembers();
			State = 239; Match(T__3);
			State = 240; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartialContext : ParserRuleContext {
		public PartialDefinitionContext partialDefinition() {
			return GetRuleContext<PartialDefinitionContext>(0);
		}
		public PartialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterPartial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitPartial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartialContext partial() {
		PartialContext _localctx = new PartialContext(Context, State);
		EnterRule(_localctx, 14, RULE_partial);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(T__6);
			State = 243; partialDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartialDefinitionContext : ParserRuleContext {
		public PartialInterfaceContext partialInterface() {
			return GetRuleContext<PartialInterfaceContext>(0);
		}
		public PartialDictionaryContext partialDictionary() {
			return GetRuleContext<PartialDictionaryContext>(0);
		}
		public PartialDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partialDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterPartialDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitPartialDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartialDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartialDefinitionContext partialDefinition() {
		PartialDefinitionContext _localctx = new PartialDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_partialDefinition);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245; partialInterface();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; partialDictionary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartialInterfaceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public InterfaceMembersContext interfaceMembers() {
			return GetRuleContext<InterfaceMembersContext>(0);
		}
		public PartialInterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partialInterface; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterPartialInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitPartialInterface(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartialInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartialInterfaceContext partialInterface() {
		PartialInterfaceContext _localctx = new PartialInterfaceContext(Context, State);
		EnterRule(_localctx, 18, RULE_partialInterface);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(T__1);
			State = 250; Match(IDENTIFIER_WEBIDL);
			State = 251; Match(T__2);
			State = 252; interfaceMembers();
			State = 253; Match(T__3);
			State = 254; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMembersContext : ParserRuleContext {
		public ExtendedAttributeListContext extendedAttributeList() {
			return GetRuleContext<ExtendedAttributeListContext>(0);
		}
		public InterfaceMemberContext interfaceMember() {
			return GetRuleContext<InterfaceMemberContext>(0);
		}
		public InterfaceMembersContext interfaceMembers() {
			return GetRuleContext<InterfaceMembersContext>(0);
		}
		public InterfaceMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMembers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterInterfaceMembers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitInterfaceMembers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMembersContext interfaceMembers() {
		InterfaceMembersContext _localctx = new InterfaceMembersContext(Context, State);
		EnterRule(_localctx, 20, RULE_interfaceMembers);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__16:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__39:
			case T__42:
			case T__43:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; extendedAttributeList();
				State = 257; interfaceMember();
				State = 258; interfaceMembers();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberContext : ParserRuleContext {
		public Const_Context const_() {
			return GetRuleContext<Const_Context>(0);
		}
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public SerializerContext serializer() {
			return GetRuleContext<SerializerContext>(0);
		}
		public StringifierContext stringifier() {
			return GetRuleContext<StringifierContext>(0);
		}
		public StaticMemberContext staticMember() {
			return GetRuleContext<StaticMemberContext>(0);
		}
		public IterableContext iterable() {
			return GetRuleContext<IterableContext>(0);
		}
		public ReadonlyMemberContext readonlyMember() {
			return GetRuleContext<ReadonlyMemberContext>(0);
		}
		public ReadWriteAttributeContext readWriteAttribute() {
			return GetRuleContext<ReadWriteAttributeContext>(0);
		}
		public ReadWriteMaplikeContext readWriteMaplike() {
			return GetRuleContext<ReadWriteMaplikeContext>(0);
		}
		public ReadWriteSetlikeContext readWriteSetlike() {
			return GetRuleContext<ReadWriteSetlikeContext>(0);
		}
		public InterfaceMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterInterfaceMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitInterfaceMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberContext interfaceMember() {
		InterfaceMemberContext _localctx = new InterfaceMemberContext(Context, State);
		EnterRule(_localctx, 22, RULE_interfaceMember);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; const_();
				}
				break;
			case T__16:
			case T__28:
			case T__34:
			case T__35:
			case T__36:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; operation();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265; serializer();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266; stringifier();
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 5);
				{
				State = 267; staticMember();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 6);
				{
				State = 268; iterable();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 7);
				{
				State = 269; readonlyMember();
				}
				break;
			case T__29:
			case T__33:
				EnterOuterAlt(_localctx, 8);
				{
				State = 270; readWriteAttribute();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 9);
				{
				State = 271; readWriteMaplike();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 10);
				{
				State = 272; readWriteSetlike();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public InheritanceContext inheritance() {
			return GetRuleContext<InheritanceContext>(0);
		}
		public DictionaryMembersContext dictionaryMembers() {
			return GetRuleContext<DictionaryMembersContext>(0);
		}
		public DictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDictionary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDictionary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryContext dictionary() {
		DictionaryContext _localctx = new DictionaryContext(Context, State);
		EnterRule(_localctx, 24, RULE_dictionary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(T__7);
			State = 276; Match(IDENTIFIER_WEBIDL);
			State = 277; inheritance();
			State = 278; Match(T__2);
			State = 279; dictionaryMembers();
			State = 280; Match(T__3);
			State = 281; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryMembersContext : ParserRuleContext {
		public ExtendedAttributeListContext extendedAttributeList() {
			return GetRuleContext<ExtendedAttributeListContext>(0);
		}
		public DictionaryMemberContext dictionaryMember() {
			return GetRuleContext<DictionaryMemberContext>(0);
		}
		public DictionaryMembersContext dictionaryMembers() {
			return GetRuleContext<DictionaryMembersContext>(0);
		}
		public DictionaryMembersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryMembers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDictionaryMembers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDictionaryMembers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryMembers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryMembersContext dictionaryMembers() {
		DictionaryMembersContext _localctx = new DictionaryMembersContext(Context, State);
		EnterRule(_localctx, 26, RULE_dictionaryMembers);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case T__10:
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283; extendedAttributeList();
				State = 284; dictionaryMember();
				State = 285; dictionaryMembers();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryMemberContext : ParserRuleContext {
		public RequiredContext required() {
			return GetRuleContext<RequiredContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public Default_Context default_() {
			return GetRuleContext<Default_Context>(0);
		}
		public DictionaryMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDictionaryMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDictionaryMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryMemberContext dictionaryMember() {
		DictionaryMemberContext _localctx = new DictionaryMemberContext(Context, State);
		EnterRule(_localctx, 28, RULE_dictionaryMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; required();
			State = 291; type();
			State = 292; Match(IDENTIFIER_WEBIDL);
			State = 293; default_();
			State = 294; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredContext : ParserRuleContext {
		public RequiredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_required; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterRequired(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitRequired(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequired(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredContext required() {
		RequiredContext _localctx = new RequiredContext(Context, State);
		EnterRule(_localctx, 30, RULE_required);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; Match(T__8);
				}
				break;
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartialDictionaryContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public DictionaryMembersContext dictionaryMembers() {
			return GetRuleContext<DictionaryMembersContext>(0);
		}
		public PartialDictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partialDictionary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterPartialDictionary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitPartialDictionary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartialDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartialDictionaryContext partialDictionary() {
		PartialDictionaryContext _localctx = new PartialDictionaryContext(Context, State);
		EnterRule(_localctx, 32, RULE_partialDictionary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(T__7);
			State = 301; Match(IDENTIFIER_WEBIDL);
			State = 302; Match(T__2);
			State = 303; dictionaryMembers();
			State = 304; Match(T__3);
			State = 305; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_Context : ParserRuleContext {
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public Default_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDefault_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDefault_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_Context default_() {
		Default_Context _localctx = new Default_Context(Context, State);
		EnterRule(_localctx, 34, RULE_default_);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; Match(T__9);
				State = 308; defaultValue();
				}
				break;
			case T__4:
			case T__15:
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ConstValueContext constValue() {
			return GetRuleContext<ConstValueContext>(0);
		}
		public ITerminalNode STRING_WEBIDL() { return GetToken(WebIDLParser.STRING_WEBIDL, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_defaultValue);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case INTEGER_WEBIDL:
			case FLOAT_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312; constValue();
				}
				break;
			case STRING_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313; Match(STRING_WEBIDL);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314; Match(T__10);
				State = 315; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public InheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterInheritance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitInheritance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceContext inheritance() {
		InheritanceContext _localctx = new InheritanceContext(Context, State);
		EnterRule(_localctx, 38, RULE_inheritance);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; Match(T__12);
				State = 319; Match(IDENTIFIER_WEBIDL);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 40, RULE_extension);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; Match(T__13);
				State = 324; Match(IDENTIFIER_WEBIDL);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public EnumValueListContext enumValueList() {
			return GetRuleContext<EnumValueListContext>(0);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(Context, State);
		EnterRule(_localctx, 42, RULE_enum_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(T__14);
			State = 329; Match(IDENTIFIER_WEBIDL);
			State = 330; Match(T__2);
			State = 331; enumValueList();
			State = 332; Match(T__3);
			State = 333; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueListContext : ParserRuleContext {
		public ITerminalNode STRING_WEBIDL() { return GetToken(WebIDLParser.STRING_WEBIDL, 0); }
		public EnumValueListCommaContext enumValueListComma() {
			return GetRuleContext<EnumValueListCommaContext>(0);
		}
		public EnumValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterEnumValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitEnumValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueListContext enumValueList() {
		EnumValueListContext _localctx = new EnumValueListContext(Context, State);
		EnterRule(_localctx, 44, RULE_enumValueList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(STRING_WEBIDL);
			State = 336; enumValueListComma();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueListCommaContext : ParserRuleContext {
		public EnumValueListStringContext enumValueListString() {
			return GetRuleContext<EnumValueListStringContext>(0);
		}
		public EnumValueListCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueListComma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterEnumValueListComma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitEnumValueListComma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueListComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueListCommaContext enumValueListComma() {
		EnumValueListCommaContext _localctx = new EnumValueListCommaContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValueListComma);
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; Match(T__15);
				State = 339; enumValueListString();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueListStringContext : ParserRuleContext {
		public ITerminalNode STRING_WEBIDL() { return GetToken(WebIDLParser.STRING_WEBIDL, 0); }
		public EnumValueListCommaContext enumValueListComma() {
			return GetRuleContext<EnumValueListCommaContext>(0);
		}
		public EnumValueListStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueListString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterEnumValueListString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitEnumValueListString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueListString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueListStringContext enumValueListString() {
		EnumValueListStringContext _localctx = new EnumValueListStringContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumValueListString);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343; Match(STRING_WEBIDL);
				State = 344; enumValueListComma();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallbackRestContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallbackRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callbackRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterCallbackRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitCallbackRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallbackRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallbackRestContext callbackRest() {
		CallbackRestContext _localctx = new CallbackRestContext(Context, State);
		EnterRule(_localctx, 50, RULE_callbackRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(IDENTIFIER_WEBIDL);
			State = 349; Match(T__9);
			State = 350; returnType();
			State = 351; Match(T__16);
			State = 352; argumentList();
			State = 353; Match(T__17);
			State = 354; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public TypedefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterTypedef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitTypedef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedefContext typedef() {
		TypedefContext _localctx = new TypedefContext(Context, State);
		EnterRule(_localctx, 52, RULE_typedef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(T__18);
			State = 357; type();
			State = 358; Match(IDENTIFIER_WEBIDL);
			State = 359; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStatementContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER_WEBIDL() { return GetTokens(WebIDLParser.IDENTIFIER_WEBIDL); }
		public ITerminalNode IDENTIFIER_WEBIDL(int i) {
			return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
		}
		public ImplementsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterImplementsStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitImplementsStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStatementContext implementsStatement() {
		ImplementsStatementContext _localctx = new ImplementsStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_implementsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361; Match(IDENTIFIER_WEBIDL);
			State = 362; Match(T__19);
			State = 363; Match(IDENTIFIER_WEBIDL);
			State = 364; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_Context : ParserRuleContext {
		public ConstTypeContext constType() {
			return GetRuleContext<ConstTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ConstValueContext constValue() {
			return GetRuleContext<ConstValueContext>(0);
		}
		public Const_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterConst_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitConst_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_Context const_() {
		Const_Context _localctx = new Const_Context(Context, State);
		EnterRule(_localctx, 56, RULE_const_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; Match(T__20);
			State = 367; constType();
			State = 368; Match(IDENTIFIER_WEBIDL);
			State = 369; Match(T__9);
			State = 370; constValue();
			State = 371; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstValueContext : ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public ITerminalNode INTEGER_WEBIDL() { return GetToken(WebIDLParser.INTEGER_WEBIDL, 0); }
		public ConstValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterConstValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitConstValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstValueContext constValue() {
		ConstValueContext _localctx = new ConstValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_constValue);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 373; booleanLiteral();
				}
				break;
			case T__24:
			case T__25:
			case T__26:
			case FLOAT_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374; floatLiteral();
				}
				break;
			case INTEGER_WEBIDL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; Match(INTEGER_WEBIDL);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(_la==T__22 || _la==T__23) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		public ITerminalNode FLOAT_WEBIDL() { return GetToken(WebIDLParser.FLOAT_WEBIDL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (T__24 - 25)) | (1L << (T__25 - 25)) | (1L << (T__26 - 25)) | (1L << (FLOAT_WEBIDL - 25)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SerializerContext : ParserRuleContext {
		public SerializerRestContext serializerRest() {
			return GetRuleContext<SerializerRestContext>(0);
		}
		public SerializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSerializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSerializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SerializerContext serializer() {
		SerializerContext _localctx = new SerializerContext(Context, State);
		EnterRule(_localctx, 64, RULE_serializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; Match(T__27);
			State = 384; serializerRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SerializerRestContext : ParserRuleContext {
		public OperationRestContext operationRest() {
			return GetRuleContext<OperationRestContext>(0);
		}
		public SerializationPatternContext serializationPattern() {
			return GetRuleContext<SerializationPatternContext>(0);
		}
		public SerializerRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serializerRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSerializerRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSerializerRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializerRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SerializerRestContext serializerRest() {
		SerializerRestContext _localctx = new SerializerRestContext(Context, State);
		EnterRule(_localctx, 66, RULE_serializerRest);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; operationRest();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; Match(T__9);
				State = 388; serializationPattern();
				State = 389; Match(T__4);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SerializationPatternContext : ParserRuleContext {
		public SerializationPatternMapContext serializationPatternMap() {
			return GetRuleContext<SerializationPatternMapContext>(0);
		}
		public SerializationPatternListContext serializationPatternList() {
			return GetRuleContext<SerializationPatternListContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public SerializationPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serializationPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSerializationPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSerializationPattern(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializationPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SerializationPatternContext serializationPattern() {
		SerializationPatternContext _localctx = new SerializationPatternContext(Context, State);
		EnterRule(_localctx, 68, RULE_serializationPattern);
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 394; Match(T__2);
				State = 395; serializationPatternMap();
				State = 396; Match(T__3);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 398; Match(T__10);
				State = 399; serializationPatternList();
				State = 400; Match(T__11);
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 402; Match(IDENTIFIER_WEBIDL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SerializationPatternMapContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public SerializationPatternMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serializationPatternMap; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSerializationPatternMap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSerializationPatternMap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializationPatternMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SerializationPatternMapContext serializationPatternMap() {
		SerializationPatternMapContext _localctx = new SerializationPatternMapContext(Context, State);
		EnterRule(_localctx, 70, RULE_serializationPatternMap);
		try {
			State = 411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; Match(T__29);
				State = 407; identifiers();
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 408; Match(IDENTIFIER_WEBIDL);
				State = 409; identifiers();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SerializationPatternListContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public SerializationPatternListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serializationPatternList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSerializationPatternList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSerializationPatternList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerializationPatternList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SerializationPatternListContext serializationPatternList() {
		SerializationPatternListContext _localctx = new SerializationPatternListContext(Context, State);
		EnterRule(_localctx, 72, RULE_serializationPatternList);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; Match(T__28);
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; Match(IDENTIFIER_WEBIDL);
				State = 415; identifiers();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringifierContext : ParserRuleContext {
		public StringifierRestContext stringifierRest() {
			return GetRuleContext<StringifierRestContext>(0);
		}
		public StringifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterStringifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitStringifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringifierContext stringifier() {
		StringifierContext _localctx = new StringifierContext(Context, State);
		EnterRule(_localctx, 74, RULE_stringifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(T__30);
			State = 420; stringifierRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringifierRestContext : ParserRuleContext {
		public ReadOnlyContext readOnly() {
			return GetRuleContext<ReadOnlyContext>(0);
		}
		public AttributeRestContext attributeRest() {
			return GetRuleContext<AttributeRestContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OperationRestContext operationRest() {
			return GetRuleContext<OperationRestContext>(0);
		}
		public StringifierRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringifierRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterStringifierRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitStringifierRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringifierRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringifierRestContext stringifierRest() {
		StringifierRestContext _localctx = new StringifierRestContext(Context, State);
		EnterRule(_localctx, 76, RULE_stringifierRest);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
			case T__33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422; readOnly();
				State = 423; attributeRest();
				}
				break;
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425; returnType();
				State = 426; operationRest();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 428; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticMemberContext : ParserRuleContext {
		public StaticMemberRestContext staticMemberRest() {
			return GetRuleContext<StaticMemberRestContext>(0);
		}
		public StaticMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterStaticMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitStaticMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticMemberContext staticMember() {
		StaticMemberContext _localctx = new StaticMemberContext(Context, State);
		EnterRule(_localctx, 78, RULE_staticMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T__31);
			State = 432; staticMemberRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticMemberRestContext : ParserRuleContext {
		public ReadOnlyContext readOnly() {
			return GetRuleContext<ReadOnlyContext>(0);
		}
		public AttributeRestContext attributeRest() {
			return GetRuleContext<AttributeRestContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OperationRestContext operationRest() {
			return GetRuleContext<OperationRestContext>(0);
		}
		public StaticMemberRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticMemberRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterStaticMemberRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitStaticMemberRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticMemberRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticMemberRestContext staticMemberRest() {
		StaticMemberRestContext _localctx = new StaticMemberRestContext(Context, State);
		EnterRule(_localctx, 80, RULE_staticMemberRest);
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
			case T__33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434; readOnly();
				State = 435; attributeRest();
				}
				break;
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 437; returnType();
				State = 438; operationRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadonlyMemberContext : ParserRuleContext {
		public ReadonlyMemberRestContext readonlyMemberRest() {
			return GetRuleContext<ReadonlyMemberRestContext>(0);
		}
		public ReadonlyMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readonlyMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReadonlyMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReadonlyMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadonlyMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadonlyMemberContext readonlyMember() {
		ReadonlyMemberContext _localctx = new ReadonlyMemberContext(Context, State);
		EnterRule(_localctx, 82, RULE_readonlyMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(T__32);
			State = 443; readonlyMemberRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadonlyMemberRestContext : ParserRuleContext {
		public AttributeRestContext attributeRest() {
			return GetRuleContext<AttributeRestContext>(0);
		}
		public ReadWriteMaplikeContext readWriteMaplike() {
			return GetRuleContext<ReadWriteMaplikeContext>(0);
		}
		public ReadWriteSetlikeContext readWriteSetlike() {
			return GetRuleContext<ReadWriteSetlikeContext>(0);
		}
		public ReadonlyMemberRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readonlyMemberRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReadonlyMemberRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReadonlyMemberRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadonlyMemberRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadonlyMemberRestContext readonlyMemberRest() {
		ReadonlyMemberRestContext _localctx = new ReadonlyMemberRestContext(Context, State);
		EnterRule(_localctx, 84, RULE_readonlyMemberRest);
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445; attributeRest();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446; readWriteMaplike();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 3);
				{
				State = 447; readWriteSetlike();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadWriteAttributeContext : ParserRuleContext {
		public ReadOnlyContext readOnly() {
			return GetRuleContext<ReadOnlyContext>(0);
		}
		public AttributeRestContext attributeRest() {
			return GetRuleContext<AttributeRestContext>(0);
		}
		public ReadWriteAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readWriteAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReadWriteAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReadWriteAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadWriteAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadWriteAttributeContext readWriteAttribute() {
		ReadWriteAttributeContext _localctx = new ReadWriteAttributeContext(Context, State);
		EnterRule(_localctx, 86, RULE_readWriteAttribute);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 450; Match(T__29);
				State = 451; readOnly();
				State = 452; attributeRest();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454; attributeRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeRestContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public AttributeRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterAttributeRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitAttributeRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeRestContext attributeRest() {
		AttributeRestContext _localctx = new AttributeRestContext(Context, State);
		EnterRule(_localctx, 88, RULE_attributeRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__33);
			State = 458; type();
			State = 459; attributeName();
			State = 460; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		public AttributeNameKeywordContext attributeNameKeyword() {
			return GetRuleContext<AttributeNameKeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitAttributeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(Context, State);
		EnterRule(_localctx, 90, RULE_attributeName);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462; attributeNameKeyword();
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463; Match(IDENTIFIER_WEBIDL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameKeywordContext : ParserRuleContext {
		public AttributeNameKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeNameKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterAttributeNameKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitAttributeNameKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeNameKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameKeywordContext attributeNameKeyword() {
		AttributeNameKeywordContext _localctx = new AttributeNameKeywordContext(Context, State);
		EnterRule(_localctx, 92, RULE_attributeNameKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritContext : ParserRuleContext {
		public InheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitInherit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritContext inherit() {
		InheritContext _localctx = new InheritContext(Context, State);
		EnterRule(_localctx, 94, RULE_inherit);
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__29:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; Match(T__29);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadOnlyContext : ParserRuleContext {
		public ReadOnlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readOnly; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReadOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReadOnly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadOnly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadOnlyContext readOnly() {
		ReadOnlyContext _localctx = new ReadOnlyContext(Context, State);
		EnterRule(_localctx, 96, RULE_readOnly);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__32:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472; Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OperationRestContext operationRest() {
			return GetRuleContext<OperationRestContext>(0);
		}
		public SpecialOperationContext specialOperation() {
			return GetRuleContext<SpecialOperationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 98, RULE_operation);
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; returnType();
				State = 477; operationRest();
				}
				break;
			case T__28:
			case T__34:
			case T__35:
			case T__36:
				EnterOuterAlt(_localctx, 2);
				{
				State = 479; specialOperation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialOperationContext : ParserRuleContext {
		public SpecialContext special() {
			return GetRuleContext<SpecialContext>(0);
		}
		public SpecialsContext specials() {
			return GetRuleContext<SpecialsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public OperationRestContext operationRest() {
			return GetRuleContext<OperationRestContext>(0);
		}
		public SpecialOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSpecialOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSpecialOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialOperationContext specialOperation() {
		SpecialOperationContext _localctx = new SpecialOperationContext(Context, State);
		EnterRule(_localctx, 100, RULE_specialOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; special();
			State = 483; specials();
			State = 484; returnType();
			State = 485; operationRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialsContext : ParserRuleContext {
		public SpecialContext special() {
			return GetRuleContext<SpecialContext>(0);
		}
		public SpecialsContext specials() {
			return GetRuleContext<SpecialsContext>(0);
		}
		public SpecialsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specials; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSpecials(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSpecials(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecials(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialsContext specials() {
		SpecialsContext _localctx = new SpecialsContext(Context, State);
		EnterRule(_localctx, 102, RULE_specials);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
			case T__34:
			case T__35:
			case T__36:
				EnterOuterAlt(_localctx, 1);
				{
				State = 487; special();
				State = 488; specials();
				}
				break;
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialContext : ParserRuleContext {
		public SpecialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSpecial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSpecial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialContext special() {
		SpecialContext _localctx = new SpecialContext(Context, State);
		EnterRule(_localctx, 104, RULE_special);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__28) | (1L << T__34) | (1L << T__35) | (1L << T__36))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationRestContext : ParserRuleContext {
		public OptionalIdentifierContext optionalIdentifier() {
			return GetRuleContext<OptionalIdentifierContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public OperationRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOperationRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOperationRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationRestContext operationRest() {
		OperationRestContext _localctx = new OperationRestContext(Context, State);
		EnterRule(_localctx, 106, RULE_operationRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; optionalIdentifier();
			State = 496; Match(T__16);
			State = 497; argumentList();
			State = 498; Match(T__17);
			State = 499; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalIdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public OptionalIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOptionalIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOptionalIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalIdentifierContext optionalIdentifier() {
		OptionalIdentifierContext _localctx = new OptionalIdentifierContext(Context, State);
		EnterRule(_localctx, 108, RULE_optionalIdentifier);
		try {
			State = 503;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501; Match(IDENTIFIER_WEBIDL);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 110, RULE_argumentList);
		try {
			State = 509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
			case T__16:
			case T__37:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 505; argument();
				State = 506; arguments();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 112, RULE_arguments);
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 511; Match(T__15);
				State = 512; argument();
				State = 513; arguments();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExtendedAttributeListContext extendedAttributeList() {
			return GetRuleContext<ExtendedAttributeListContext>(0);
		}
		public OptionalOrRequiredArgumentContext optionalOrRequiredArgument() {
			return GetRuleContext<OptionalOrRequiredArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 114, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518; extendedAttributeList();
			State = 519; optionalOrRequiredArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalOrRequiredArgumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public Default_Context default_() {
			return GetRuleContext<Default_Context>(0);
		}
		public EllipsisContext ellipsis() {
			return GetRuleContext<EllipsisContext>(0);
		}
		public OptionalOrRequiredArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalOrRequiredArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOptionalOrRequiredArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOptionalOrRequiredArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalOrRequiredArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalOrRequiredArgumentContext optionalOrRequiredArgument() {
		OptionalOrRequiredArgumentContext _localctx = new OptionalOrRequiredArgumentContext(Context, State);
		EnterRule(_localctx, 116, RULE_optionalOrRequiredArgument);
		try {
			State = 530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__37:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521; Match(T__37);
				State = 522; type();
				State = 523; argumentName();
				State = 524; default_();
				}
				break;
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526; type();
				State = 527; ellipsis();
				State = 528; argumentName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ArgumentNameKeywordContext argumentNameKeyword() {
			return GetRuleContext<ArgumentNameKeywordContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 118, RULE_argumentName);
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__14:
			case T__18:
			case T__19:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__39:
			case T__42:
			case T__43:
			case T__65:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532; argumentNameKeyword();
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533; Match(IDENTIFIER_WEBIDL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EllipsisContext : ParserRuleContext {
		public EllipsisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ellipsis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterEllipsis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitEllipsis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEllipsis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EllipsisContext ellipsis() {
		EllipsisContext _localctx = new EllipsisContext(Context, State);
		EnterRule(_localctx, 120, RULE_ellipsis);
		try {
			State = 538;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536; Match(T__38);
				}
				break;
			case T__0:
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__14:
			case T__18:
			case T__19:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__39:
			case T__42:
			case T__43:
			case T__65:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterableContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OptionalTypeContext optionalType() {
			return GetRuleContext<OptionalTypeContext>(0);
		}
		public IterableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterIterable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitIterable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterableContext iterable() {
		IterableContext _localctx = new IterableContext(Context, State);
		EnterRule(_localctx, 122, RULE_iterable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(T__39);
			State = 541; Match(T__40);
			State = 542; type();
			State = 543; optionalType();
			State = 544; Match(T__41);
			State = 545; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public OptionalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOptionalType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOptionalType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalTypeContext optionalType() {
		OptionalTypeContext _localctx = new OptionalTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_optionalType);
		try {
			State = 550;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 547; Match(T__15);
				State = 548; type();
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadWriteMaplikeContext : ParserRuleContext {
		public MaplikeRestContext maplikeRest() {
			return GetRuleContext<MaplikeRestContext>(0);
		}
		public ReadWriteMaplikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readWriteMaplike; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReadWriteMaplike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReadWriteMaplike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadWriteMaplike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadWriteMaplikeContext readWriteMaplike() {
		ReadWriteMaplikeContext _localctx = new ReadWriteMaplikeContext(Context, State);
		EnterRule(_localctx, 126, RULE_readWriteMaplike);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; maplikeRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadWriteSetlikeContext : ParserRuleContext {
		public SetlikeRestContext setlikeRest() {
			return GetRuleContext<SetlikeRestContext>(0);
		}
		public ReadWriteSetlikeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readWriteSetlike; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReadWriteSetlike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReadWriteSetlike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadWriteSetlike(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadWriteSetlikeContext readWriteSetlike() {
		ReadWriteSetlikeContext _localctx = new ReadWriteSetlikeContext(Context, State);
		EnterRule(_localctx, 128, RULE_readWriteSetlike);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554; setlikeRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaplikeRestContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public MaplikeRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maplikeRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterMaplikeRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitMaplikeRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaplikeRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaplikeRestContext maplikeRest() {
		MaplikeRestContext _localctx = new MaplikeRestContext(Context, State);
		EnterRule(_localctx, 130, RULE_maplikeRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556; Match(T__42);
			State = 557; Match(T__40);
			State = 558; type();
			State = 559; Match(T__15);
			State = 560; type();
			State = 561; Match(T__41);
			State = 562; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetlikeRestContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SetlikeRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setlikeRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSetlikeRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSetlikeRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetlikeRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetlikeRestContext setlikeRest() {
		SetlikeRestContext _localctx = new SetlikeRestContext(Context, State);
		EnterRule(_localctx, 132, RULE_setlikeRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(T__43);
			State = 565; Match(T__40);
			State = 566; type();
			State = 567; Match(T__41);
			State = 568; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeListContext : ParserRuleContext {
		public ExtendedAttributeContext extendedAttribute() {
			return GetRuleContext<ExtendedAttributeContext>(0);
		}
		public ExtendedAttributesContext extendedAttributes() {
			return GetRuleContext<ExtendedAttributesContext>(0);
		}
		public ExtendedAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeListContext extendedAttributeList() {
		ExtendedAttributeListContext _localctx = new ExtendedAttributeListContext(Context, State);
		EnterRule(_localctx, 134, RULE_extendedAttributeList);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; Match(T__10);
				State = 571; extendedAttribute();
				State = 572; extendedAttributes();
				State = 573; Match(T__11);
				}
				break;
			case T__0:
			case T__1:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__14:
			case T__16:
			case T__18:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__39:
			case T__42:
			case T__43:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributesContext : ParserRuleContext {
		public ExtendedAttributeContext extendedAttribute() {
			return GetRuleContext<ExtendedAttributeContext>(0);
		}
		public ExtendedAttributesContext extendedAttributes() {
			return GetRuleContext<ExtendedAttributesContext>(0);
		}
		public ExtendedAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributesContext extendedAttributes() {
		ExtendedAttributesContext _localctx = new ExtendedAttributesContext(Context, State);
		EnterRule(_localctx, 136, RULE_extendedAttributes);
		try {
			State = 583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578; Match(T__15);
				State = 579; extendedAttribute();
				State = 580; extendedAttributes();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeContext : ParserRuleContext {
		public ExtendedAttributeInnerContext extendedAttributeInner() {
			return GetRuleContext<ExtendedAttributeInnerContext>(0);
		}
		public ExtendedAttributeRestContext extendedAttributeRest() {
			return GetRuleContext<ExtendedAttributeRestContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public ExtendedAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeContext extendedAttribute() {
		ExtendedAttributeContext _localctx = new ExtendedAttributeContext(Context, State);
		EnterRule(_localctx, 138, RULE_extendedAttribute);
		try {
			State = 603;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; Match(T__16);
				State = 586; extendedAttributeInner();
				State = 587; Match(T__17);
				State = 588; extendedAttributeRest();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590; Match(T__10);
				State = 591; extendedAttributeInner();
				State = 592; Match(T__11);
				State = 593; extendedAttributeRest();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 595; Match(T__2);
				State = 596; extendedAttributeInner();
				State = 597; Match(T__3);
				State = 598; extendedAttributeRest();
				}
				break;
			case T__0:
			case T__1:
			case T__4:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__14:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case INTEGER_WEBIDL:
			case FLOAT_WEBIDL:
			case IDENTIFIER_WEBIDL:
			case STRING_WEBIDL:
			case OTHER_WEBIDL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 600; other();
				State = 601; extendedAttributeRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeRestContext : ParserRuleContext {
		public ExtendedAttributeContext extendedAttribute() {
			return GetRuleContext<ExtendedAttributeContext>(0);
		}
		public ExtendedAttributeRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeRestContext extendedAttributeRest() {
		ExtendedAttributeRestContext _localctx = new ExtendedAttributeRestContext(Context, State);
		EnterRule(_localctx, 140, RULE_extendedAttributeRest);
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__4:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__12:
			case T__14:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case INTEGER_WEBIDL:
			case FLOAT_WEBIDL:
			case IDENTIFIER_WEBIDL:
			case STRING_WEBIDL:
			case OTHER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 605; extendedAttribute();
				}
				break;
			case T__11:
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeInnerContext : ParserRuleContext {
		public ExtendedAttributeInnerContext[] extendedAttributeInner() {
			return GetRuleContexts<ExtendedAttributeInnerContext>();
		}
		public ExtendedAttributeInnerContext extendedAttributeInner(int i) {
			return GetRuleContext<ExtendedAttributeInnerContext>(i);
		}
		public OtherOrCommaContext otherOrComma() {
			return GetRuleContext<OtherOrCommaContext>(0);
		}
		public ExtendedAttributeInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeInner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeInner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeInner(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeInnerContext extendedAttributeInner() {
		ExtendedAttributeInnerContext _localctx = new ExtendedAttributeInnerContext(Context, State);
		EnterRule(_localctx, 142, RULE_extendedAttributeInner);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; Match(T__16);
				State = 610; extendedAttributeInner();
				State = 611; Match(T__17);
				State = 612; extendedAttributeInner();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614; Match(T__10);
				State = 615; extendedAttributeInner();
				State = 616; Match(T__11);
				State = 617; extendedAttributeInner();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 619; Match(T__2);
				State = 620; extendedAttributeInner();
				State = 621; Match(T__3);
				State = 622; extendedAttributeInner();
				}
				break;
			case T__0:
			case T__1:
			case T__4:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__14:
			case T__15:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case INTEGER_WEBIDL:
			case FLOAT_WEBIDL:
			case IDENTIFIER_WEBIDL:
			case STRING_WEBIDL:
			case OTHER_WEBIDL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 624; otherOrComma();
				State = 625; extendedAttributeInner();
				}
				break;
			case T__3:
			case T__11:
			case T__17:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode INTEGER_WEBIDL() { return GetToken(WebIDLParser.INTEGER_WEBIDL, 0); }
		public ITerminalNode FLOAT_WEBIDL() { return GetToken(WebIDLParser.FLOAT_WEBIDL, 0); }
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ITerminalNode STRING_WEBIDL() { return GetToken(WebIDLParser.STRING_WEBIDL, 0); }
		public ITerminalNode OTHER_WEBIDL() { return GetToken(WebIDLParser.OTHER_WEBIDL, 0); }
		public ArgumentNameKeywordContext argumentNameKeyword() {
			return GetRuleContext<ArgumentNameKeywordContext>(0);
		}
		public BufferRelatedTypeContext bufferRelatedType() {
			return GetRuleContext<BufferRelatedTypeContext>(0);
		}
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 144, RULE_other);
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630; Match(INTEGER_WEBIDL);
				}
				break;
			case FLOAT_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631; Match(FLOAT_WEBIDL);
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 632; Match(IDENTIFIER_WEBIDL);
				}
				break;
			case STRING_WEBIDL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 633; Match(STRING_WEBIDL);
				}
				break;
			case OTHER_WEBIDL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 634; Match(OTHER_WEBIDL);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 6);
				{
				State = 635; Match(T__44);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 7);
				{
				State = 636; Match(T__24);
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 8);
				{
				State = 637; Match(T__45);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 9);
				{
				State = 638; Match(T__38);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 10);
				{
				State = 639; Match(T__12);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 11);
				{
				State = 640; Match(T__4);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 12);
				{
				State = 641; Match(T__40);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 13);
				{
				State = 642; Match(T__9);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 14);
				{
				State = 643; Match(T__41);
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 15);
				{
				State = 644; Match(T__46);
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 16);
				{
				State = 645; Match(T__47);
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 17);
				{
				State = 646; Match(T__48);
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 18);
				{
				State = 647; Match(T__49);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 19);
				{
				State = 648; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 20);
				{
				State = 649; Match(T__26);
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 21);
				{
				State = 650; Match(T__50);
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 22);
				{
				State = 651; Match(T__51);
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 23);
				{
				State = 652; Match(T__52);
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 24);
				{
				State = 653; Match(T__53);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 25);
				{
				State = 654; Match(T__54);
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 26);
				{
				State = 655; Match(T__55);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 27);
				{
				State = 656; Match(T__23);
				}
				break;
			case T__56:
				EnterOuterAlt(_localctx, 28);
				{
				State = 657; Match(T__56);
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 29);
				{
				State = 658; Match(T__57);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 30);
				{
				State = 659; Match(T__21);
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 31);
				{
				State = 660; Match(T__58);
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 32);
				{
				State = 661; Match(T__59);
				}
				break;
			case T__60:
				EnterOuterAlt(_localctx, 33);
				{
				State = 662; Match(T__60);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 34);
				{
				State = 663; Match(T__37);
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 35);
				{
				State = 664; Match(T__61);
				}
				break;
			case T__62:
				EnterOuterAlt(_localctx, 36);
				{
				State = 665; Match(T__62);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 37);
				{
				State = 666; Match(T__22);
				}
				break;
			case T__63:
				EnterOuterAlt(_localctx, 38);
				{
				State = 667; Match(T__63);
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 39);
				{
				State = 668; Match(T__64);
				}
				break;
			case T__0:
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__14:
			case T__18:
			case T__19:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__39:
			case T__42:
			case T__43:
			case T__65:
				EnterOuterAlt(_localctx, 40);
				{
				State = 669; argumentNameKeyword();
				}
				break;
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
				EnterOuterAlt(_localctx, 41);
				{
				State = 670; bufferRelatedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameKeywordContext : ParserRuleContext {
		public ArgumentNameKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentNameKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterArgumentNameKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitArgumentNameKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentNameKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameKeywordContext argumentNameKeyword() {
		ArgumentNameKeywordContext _localctx = new ArgumentNameKeywordContext(Context, State);
		EnterRule(_localctx, 146, RULE_argumentNameKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__14) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__39) | (1L << T__42) | (1L << T__43))) != 0) || _la==T__65) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherOrCommaContext : ParserRuleContext {
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public OtherOrCommaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherOrComma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOtherOrComma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOtherOrComma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherOrComma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherOrCommaContext otherOrComma() {
		OtherOrCommaContext _localctx = new OtherOrCommaContext(Context, State);
		EnterRule(_localctx, 148, RULE_otherOrComma);
		try {
			State = 677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__4:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__14:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__60:
			case T__61:
			case T__62:
			case T__63:
			case T__64:
			case T__65:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case INTEGER_WEBIDL:
			case FLOAT_WEBIDL:
			case IDENTIFIER_WEBIDL:
			case STRING_WEBIDL:
			case OTHER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675; other();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 676; Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public SingleTypeContext singleType() {
			return GetRuleContext<SingleTypeContext>(0);
		}
		public UnionTypeContext unionType() {
			return GetRuleContext<UnionTypeContext>(0);
		}
		public Null_Context null_() {
			return GetRuleContext<Null_Context>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_type);
		try {
			State = 683;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 679; singleType();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680; unionType();
				State = 681; null_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeContext : ParserRuleContext {
		public NonAnyTypeContext nonAnyType() {
			return GetRuleContext<NonAnyTypeContext>(0);
		}
		public SingleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterSingleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitSingleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeContext singleType() {
		SingleTypeContext _localctx = new SingleTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_singleType);
		try {
			State = 687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 685; nonAnyType();
				}
				break;
			case T__52:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686; Match(T__52);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeContext : ParserRuleContext {
		public UnionMemberTypeContext[] unionMemberType() {
			return GetRuleContexts<UnionMemberTypeContext>();
		}
		public UnionMemberTypeContext unionMemberType(int i) {
			return GetRuleContext<UnionMemberTypeContext>(i);
		}
		public UnionMemberTypesContext unionMemberTypes() {
			return GetRuleContext<UnionMemberTypesContext>(0);
		}
		public UnionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterUnionType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitUnionType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionTypeContext unionType() {
		UnionTypeContext _localctx = new UnionTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_unionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689; Match(T__16);
			State = 690; unionMemberType();
			State = 691; Match(T__60);
			State = 692; unionMemberType();
			State = 693; unionMemberTypes();
			State = 694; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMemberTypeContext : ParserRuleContext {
		public NonAnyTypeContext nonAnyType() {
			return GetRuleContext<NonAnyTypeContext>(0);
		}
		public UnionTypeContext unionType() {
			return GetRuleContext<UnionTypeContext>(0);
		}
		public Null_Context null_() {
			return GetRuleContext<Null_Context>(0);
		}
		public UnionMemberTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMemberType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterUnionMemberType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitUnionMemberType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionMemberType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionMemberTypeContext unionMemberType() {
		UnionMemberTypeContext _localctx = new UnionMemberTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_unionMemberType);
		try {
			State = 700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 696; nonAnyType();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 697; unionType();
				State = 698; null_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionMemberTypesContext : ParserRuleContext {
		public UnionMemberTypeContext unionMemberType() {
			return GetRuleContext<UnionMemberTypeContext>(0);
		}
		public UnionMemberTypesContext unionMemberTypes() {
			return GetRuleContext<UnionMemberTypesContext>(0);
		}
		public UnionMemberTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionMemberTypes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterUnionMemberTypes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitUnionMemberTypes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionMemberTypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionMemberTypesContext unionMemberTypes() {
		UnionMemberTypesContext _localctx = new UnionMemberTypesContext(Context, State);
		EnterRule(_localctx, 158, RULE_unionMemberTypes);
		try {
			State = 707;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__60:
				EnterOuterAlt(_localctx, 1);
				{
				State = 702; Match(T__60);
				State = 703; unionMemberType();
				State = 704; unionMemberTypes();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAnyTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public Null_Context null_() {
			return GetRuleContext<Null_Context>(0);
		}
		public PromiseTypeContext promiseType() {
			return GetRuleContext<PromiseTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public BufferRelatedTypeContext bufferRelatedType() {
			return GetRuleContext<BufferRelatedTypeContext>(0);
		}
		public NonAnyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAnyType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterNonAnyType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitNonAnyType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAnyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAnyTypeContext nonAnyType() {
		NonAnyTypeContext _localctx = new NonAnyTypeContext(Context, State);
		EnterRule(_localctx, 160, RULE_nonAnyType);
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__62:
			case T__63:
			case T__65:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709; primitiveType();
				State = 710; null_();
				}
				break;
			case T__78:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712; promiseType();
				State = 713; null_();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 3);
				{
				State = 715; Match(T__47);
				State = 716; null_();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 4);
				{
				State = 717; Match(T__48);
				State = 718; null_();
				}
				break;
			case T__51:
				EnterOuterAlt(_localctx, 5);
				{
				State = 719; Match(T__51);
				State = 720; null_();
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 721; Match(IDENTIFIER_WEBIDL);
				State = 722; null_();
				}
				break;
			case T__61:
				EnterOuterAlt(_localctx, 7);
				{
				State = 723; Match(T__61);
				State = 724; Match(T__40);
				State = 725; type();
				State = 726; Match(T__41);
				State = 727; null_();
				}
				break;
			case T__58:
				EnterOuterAlt(_localctx, 8);
				{
				State = 729; Match(T__58);
				State = 730; null_();
				}
				break;
			case T__50:
				EnterOuterAlt(_localctx, 9);
				{
				State = 731; Match(T__50);
				State = 732; null_();
				}
				break;
			case T__66:
				EnterOuterAlt(_localctx, 10);
				{
				State = 733; Match(T__66);
				State = 734; null_();
				}
				break;
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
				EnterOuterAlt(_localctx, 11);
				{
				State = 735; bufferRelatedType();
				State = 736; null_();
				}
				break;
			case T__49:
				EnterOuterAlt(_localctx, 12);
				{
				State = 738; Match(T__49);
				State = 739; Match(T__40);
				State = 740; type();
				State = 741; Match(T__41);
				State = 742; null_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferRelatedTypeContext : ParserRuleContext {
		public BufferRelatedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferRelatedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterBufferRelatedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitBufferRelatedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferRelatedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferRelatedTypeContext bufferRelatedType() {
		BufferRelatedTypeContext _localctx = new BufferRelatedTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_bufferRelatedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (T__67 - 68)) | (1L << (T__68 - 68)) | (1L << (T__69 - 68)) | (1L << (T__70 - 68)) | (1L << (T__71 - 68)) | (1L << (T__72 - 68)) | (1L << (T__73 - 68)) | (1L << (T__74 - 68)) | (1L << (T__75 - 68)) | (1L << (T__76 - 68)) | (1L << (T__77 - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstTypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public Null_Context null_() {
			return GetRuleContext<Null_Context>(0);
		}
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ConstTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterConstType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitConstType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstTypeContext constType() {
		ConstTypeContext _localctx = new ConstTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_constType);
		try {
			State = 753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__59:
			case T__62:
			case T__63:
			case T__65:
				EnterOuterAlt(_localctx, 1);
				{
				State = 748; primitiveType();
				State = 749; null_();
				}
				break;
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 751; Match(IDENTIFIER_WEBIDL);
				State = 752; null_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public UnsignedIntegerTypeContext unsignedIntegerType() {
			return GetRuleContext<UnsignedIntegerTypeContext>(0);
		}
		public UnrestrictedFloatTypeContext unrestrictedFloatType() {
			return GetRuleContext<UnrestrictedFloatTypeContext>(0);
		}
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_primitiveType);
		try {
			State = 760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
			case T__62:
			case T__63:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755; unsignedIntegerType();
				}
				break;
			case T__55:
			case T__56:
			case T__65:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756; unrestrictedFloatType();
				}
				break;
			case T__53:
				EnterOuterAlt(_localctx, 3);
				{
				State = 757; Match(T__53);
				}
				break;
			case T__54:
				EnterOuterAlt(_localctx, 4);
				{
				State = 758; Match(T__54);
				}
				break;
			case T__59:
				EnterOuterAlt(_localctx, 5);
				{
				State = 759; Match(T__59);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnrestrictedFloatTypeContext : ParserRuleContext {
		public FloatTypeContext floatType() {
			return GetRuleContext<FloatTypeContext>(0);
		}
		public UnrestrictedFloatTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unrestrictedFloatType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterUnrestrictedFloatType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitUnrestrictedFloatType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnrestrictedFloatType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnrestrictedFloatTypeContext unrestrictedFloatType() {
		UnrestrictedFloatTypeContext _localctx = new UnrestrictedFloatTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_unrestrictedFloatType);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__65:
				EnterOuterAlt(_localctx, 1);
				{
				State = 762; Match(T__65);
				State = 763; floatType();
				}
				break;
			case T__55:
			case T__56:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764; floatType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatTypeContext : ParserRuleContext {
		public FloatTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterFloatType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitFloatType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatTypeContext floatType() {
		FloatTypeContext _localctx = new FloatTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_floatType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			_la = TokenStream.LA(1);
			if ( !(_la==T__55 || _la==T__56) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntegerTypeContext : ParserRuleContext {
		public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		public UnsignedIntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedIntegerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterUnsignedIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitUnsignedIntegerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntegerTypeContext unsignedIntegerType() {
		UnsignedIntegerTypeContext _localctx = new UnsignedIntegerTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_unsignedIntegerType);
		try {
			State = 772;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__63:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769; Match(T__63);
				State = 770; integerType();
				}
				break;
			case T__57:
			case T__62:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771; integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		public OptionalLongContext optionalLong() {
			return GetRuleContext<OptionalLongContext>(0);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_integerType);
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__62:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774; Match(T__62);
				}
				break;
			case T__57:
				EnterOuterAlt(_localctx, 2);
				{
				State = 775; Match(T__57);
				State = 776; optionalLong();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalLongContext : ParserRuleContext {
		public OptionalLongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalLong; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterOptionalLong(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitOptionalLong(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalLong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalLongContext optionalLong() {
		OptionalLongContext _localctx = new OptionalLongContext(Context, State);
		EnterRule(_localctx, 176, RULE_optionalLong);
		try {
			State = 781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__57:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779; Match(T__57);
				}
				break;
			case T__0:
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__38:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__46:
			case T__60:
			case T__65:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromiseTypeContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public PromiseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promiseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterPromiseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitPromiseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPromiseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PromiseTypeContext promiseType() {
		PromiseTypeContext _localctx = new PromiseTypeContext(Context, State);
		EnterRule(_localctx, 178, RULE_promiseType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; Match(T__78);
			State = 784; Match(T__40);
			State = 785; returnType();
			State = 786; Match(T__41);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_Context : ParserRuleContext {
		public Null_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterNull_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitNull_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_Context null_() {
		Null_Context _localctx = new Null_Context(Context, State);
		EnterRule(_localctx, 180, RULE_null_);
		try {
			State = 790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__46:
				EnterOuterAlt(_localctx, 1);
				{
				State = 788; Match(T__46);
				}
				break;
			case T__0:
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__38:
			case T__39:
			case T__41:
			case T__42:
			case T__43:
			case T__60:
			case T__65:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 182, RULE_returnType);
		try {
			State = 794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case T__61:
			case T__62:
			case T__63:
			case T__65:
			case T__66:
			case T__67:
			case T__68:
			case T__69:
			case T__70:
			case T__71:
			case T__72:
			case T__73:
			case T__74:
			case T__75:
			case T__76:
			case T__77:
			case T__78:
			case IDENTIFIER_WEBIDL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792; type();
				}
				break;
			case T__64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793; Match(T__64);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 184, RULE_identifierList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796; Match(IDENTIFIER_WEBIDL);
			State = 797; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterIdentifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitIdentifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 186, RULE_identifiers);
		try {
			State = 803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 799; Match(T__15);
				State = 800; Match(IDENTIFIER_WEBIDL);
				State = 801; identifiers();
				}
				break;
			case T__3:
			case T__11:
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeNoArgsContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ExtendedAttributeNoArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeNoArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeNoArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeNoArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeNoArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeNoArgsContext extendedAttributeNoArgs() {
		ExtendedAttributeNoArgsContext _localctx = new ExtendedAttributeNoArgsContext(Context, State);
		EnterRule(_localctx, 188, RULE_extendedAttributeNoArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805; Match(IDENTIFIER_WEBIDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeArgListContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExtendedAttributeArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeArgListContext extendedAttributeArgList() {
		ExtendedAttributeArgListContext _localctx = new ExtendedAttributeArgListContext(Context, State);
		EnterRule(_localctx, 190, RULE_extendedAttributeArgList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; Match(IDENTIFIER_WEBIDL);
			State = 808; Match(T__16);
			State = 809; argumentList();
			State = 810; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeIdentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER_WEBIDL() { return GetTokens(WebIDLParser.IDENTIFIER_WEBIDL); }
		public ITerminalNode IDENTIFIER_WEBIDL(int i) {
			return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
		}
		public ExtendedAttributeIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeIdent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeIdentContext extendedAttributeIdent() {
		ExtendedAttributeIdentContext _localctx = new ExtendedAttributeIdentContext(Context, State);
		EnterRule(_localctx, 192, RULE_extendedAttributeIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; Match(IDENTIFIER_WEBIDL);
			State = 813; Match(T__9);
			State = 814; Match(IDENTIFIER_WEBIDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeIdentListContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER_WEBIDL() { return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, 0); }
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public ExtendedAttributeIdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeIdentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeIdentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeIdentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeIdentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeIdentListContext extendedAttributeIdentList() {
		ExtendedAttributeIdentListContext _localctx = new ExtendedAttributeIdentListContext(Context, State);
		EnterRule(_localctx, 194, RULE_extendedAttributeIdentList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 816; Match(IDENTIFIER_WEBIDL);
			State = 817; Match(T__9);
			State = 818; Match(T__16);
			State = 819; identifierList();
			State = 820; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedAttributeNamedArgListContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER_WEBIDL() { return GetTokens(WebIDLParser.IDENTIFIER_WEBIDL); }
		public ITerminalNode IDENTIFIER_WEBIDL(int i) {
			return GetToken(WebIDLParser.IDENTIFIER_WEBIDL, i);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ExtendedAttributeNamedArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedAttributeNamedArgList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.EnterExtendedAttributeNamedArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IWebIDLListener typedListener = listener as IWebIDLListener;
			if (typedListener != null) typedListener.ExitExtendedAttributeNamedArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IWebIDLVisitor<TResult> typedVisitor = visitor as IWebIDLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedAttributeNamedArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedAttributeNamedArgListContext extendedAttributeNamedArgList() {
		ExtendedAttributeNamedArgListContext _localctx = new ExtendedAttributeNamedArgListContext(Context, State);
		EnterRule(_localctx, 196, RULE_extendedAttributeNamedArgList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822; Match(IDENTIFIER_WEBIDL);
			State = 823; Match(T__9);
			State = 824; Match(IDENTIFIER_WEBIDL);
			State = 825; Match(T__16);
			State = 826; argumentList();
			State = 827; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'X', '\x340', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\xD1', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xD9', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xDF', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xE3', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\xFA', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x108', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x114', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x123', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x12D', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x139', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x13F', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x144', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x149', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x158', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x15D', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x17C', '\n', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x18B', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x196', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x19E', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1A4', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1B0', 
		'\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1BB', '\n', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x1C3', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x5', '-', '\x1CA', '\n', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x1D3', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x1D9', '\n', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x1DD', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x1E3', '\n', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x1EE', 
		'\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x5', '\x38', '\x1FA', '\n', '\x38', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x200', '\n', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', 
		'\x207', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x5', '<', '\x215', '\n', '<', '\x3', '=', '\x3', '=', 
		'\x5', '=', '\x219', '\n', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x21D', 
		'\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', 
		'\x229', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x243', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x24A', '\n', 
		'\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 
		'G', '\x5', 'G', '\x25E', '\n', 'G', '\x3', 'H', '\x3', 'H', '\x5', 'H', 
		'\x262', '\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x277', '\n', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x2A2', '\n', 
		'J', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x2A8', 
		'\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x2AE', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x2B2', '\n', 
		'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x5', 
		'P', '\x2BF', '\n', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x5', 'Q', '\x2C6', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x2EB', '\n', 'R', '\x3', 'S', 
		'\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x5', 'T', '\x2F4', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x2FB', '\n', 'U', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x5', 'V', '\x300', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x307', '\n', 'X', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x30C', '\n', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x5', 'Z', '\x310', '\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x319', 
		'\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x31D', '\n', ']', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'_', '\x5', '_', '\x326', '\n', '_', '\x3', '`', '\x3', '`', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x2', '\x2', '\x65', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\x2', 
		'\b', '\x3', '\x2', '\x19', '\x1A', '\x4', '\x2', '\x1B', '\x1D', 'S', 
		'S', '\x4', '\x2', '\x1F', '\x1F', '%', '\'', '\v', '\x2', '\x3', '\x4', 
		'\t', '\v', '\x11', '\x11', '\x15', '\x17', '\x1E', '\"', '$', '\'', '*', 
		'*', '-', '.', '\x44', '\x44', '\x3', '\x2', '\x46', 'P', '\x3', '\x2', 
		':', ';', '\x2', '\x365', '\x2', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\x6', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xDE', '\x3', '\x2', '\x2', '\x2', '\n', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\x10', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x14', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x107', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x122', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x124', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x12C', '\x3', '\x2', '\x2', '\x2', '\"', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x13E', '\x3', '\x2', '\x2', '\x2', '(', '\x143', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x148', '\x3', '\x2', '\x2', '\x2', ',', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x157', '\x3', '\x2', '\x2', '\x2', '\x32', '\x15C', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		':', '\x170', '\x3', '\x2', '\x2', '\x2', '<', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x17D', '\x3', '\x2', '\x2', '\x2', '@', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x46', '\x195', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x19D', '\x3', '\x2', '\x2', '\x2', 'J', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1AF', '\x3', '\x2', '\x2', '\x2', 'P', '\x1B1', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1BA', '\x3', '\x2', '\x2', '\x2', 'T', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1C2', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x1C9', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1CB', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x1D2', '\x3', '\x2', '\x2', '\x2', '^', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x64', '\x1E2', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x1E4', '\x3', '\x2', '\x2', '\x2', 'h', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x1F1', '\x3', '\x2', '\x2', '\x2', 'n', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x1FF', '\x3', '\x2', '\x2', '\x2', 'r', '\x206', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x214', '\x3', '\x2', '\x2', '\x2', 'x', '\x218', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x21C', '\x3', '\x2', '\x2', '\x2', '|', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x82', '\x22C', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x86', '\x236', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x249', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x25D', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x261', '\x3', '\x2', '\x2', '\x2', '\x90', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x96', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x2C5', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x301', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x30F', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x311', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x318', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x31C', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x31E', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x325', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x327', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x329', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x32E', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x332', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x338', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\x4', 
		'\x3', '\x2', '\xC9', '\xCA', '\a', '\x2', '\x2', '\x3', '\xCA', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x5', '\x88', '\x45', '\x2', 
		'\xCC', '\xCD', '\x5', '\x6', '\x4', '\x2', '\xCD', '\xCE', '\x5', '\x4', 
		'\x3', '\x2', '\xCE', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD9', '\x5', '\b', '\x5', '\x2', '\xD3', '\xD9', 
		'\x5', '\x10', '\t', '\x2', '\xD4', '\xD9', '\x5', '\x1A', '\xE', '\x2', 
		'\xD5', '\xD9', '\x5', ',', '\x17', '\x2', '\xD6', '\xD9', '\x5', '\x36', 
		'\x1C', '\x2', '\xD7', '\xD9', '\x5', '\x38', '\x1D', '\x2', '\xD8', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\a', '\x3', '\x2', '\x2', '\xDB', '\xDF', '\x5', '\n', 
		'\x6', '\x2', '\xDC', '\xDF', '\x5', '\f', '\a', '\x2', '\xDD', '\xDF', 
		'\x5', '\xE', '\b', '\x2', '\xDE', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xDE', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\t', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', 
		'\x5', '\x34', '\x1B', '\x2', '\xE1', '\xE3', '\x5', '\f', '\a', '\x2', 
		'\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\v', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', 
		'\a', '\x4', '\x2', '\x2', '\xE5', '\xE6', '\a', 'T', '\x2', '\x2', '\xE6', 
		'\xE7', '\x5', '(', '\x15', '\x2', '\xE7', '\xE8', '\a', '\x5', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', '\x16', '\f', '\x2', '\xE9', '\xEA', '\a', 
		'\x6', '\x2', '\x2', '\xEA', '\xEB', '\a', '\a', '\x2', '\x2', '\xEB', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\b', '\x2', '\x2', 
		'\xED', '\xEE', '\a', 'T', '\x2', '\x2', '\xEE', '\xEF', '\x5', '*', '\x16', 
		'\x2', '\xEF', '\xF0', '\a', '\x5', '\x2', '\x2', '\xF0', '\xF1', '\x5', 
		'\x16', '\f', '\x2', '\xF1', '\xF2', '\a', '\x6', '\x2', '\x2', '\xF2', 
		'\xF3', '\a', '\a', '\x2', '\x2', '\xF3', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', '\t', '\x2', '\x2', '\xF5', '\xF6', '\x5', 
		'\x12', '\n', '\x2', '\xF6', '\x11', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xFA', '\x5', '\x14', '\v', '\x2', '\xF8', '\xFA', '\x5', '\"', '\x12', 
		'\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\x13', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFC', '\a', '\x4', '\x2', '\x2', '\xFC', '\xFD', '\a', 'T', '\x2', '\x2', 
		'\xFD', '\xFE', '\a', '\x5', '\x2', '\x2', '\xFE', '\xFF', '\x5', '\x16', 
		'\f', '\x2', '\xFF', '\x100', '\a', '\x6', '\x2', '\x2', '\x100', '\x101', 
		'\a', '\a', '\x2', '\x2', '\x101', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x5', '\x88', '\x45', '\x2', '\x103', '\x104', '\x5', 
		'\x18', '\r', '\x2', '\x104', '\x105', '\x5', '\x16', '\f', '\x2', '\x105', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x106', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x102', '\x3', '\x2', '\x2', '\x2', '\x107', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x114', '\x5', ':', '\x1E', '\x2', '\x10A', '\x114', '\x5', 
		'\x64', '\x33', '\x2', '\x10B', '\x114', '\x5', '\x42', '\"', '\x2', '\x10C', 
		'\x114', '\x5', 'L', '\'', '\x2', '\x10D', '\x114', '\x5', 'P', ')', '\x2', 
		'\x10E', '\x114', '\x5', '|', '?', '\x2', '\x10F', '\x114', '\x5', 'T', 
		'+', '\x2', '\x110', '\x114', '\x5', 'X', '-', '\x2', '\x111', '\x114', 
		'\x5', '\x80', '\x41', '\x2', '\x112', '\x114', '\x5', '\x82', '\x42', 
		'\x2', '\x113', '\x109', '\x3', '\x2', '\x2', '\x2', '\x113', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x113', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x113', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\a', '\n', '\x2', '\x2', '\x116', '\x117', '\a', 'T', 
		'\x2', '\x2', '\x117', '\x118', '\x5', '(', '\x15', '\x2', '\x118', '\x119', 
		'\a', '\x5', '\x2', '\x2', '\x119', '\x11A', '\x5', '\x1C', '\xF', '\x2', 
		'\x11A', '\x11B', '\a', '\x6', '\x2', '\x2', '\x11B', '\x11C', '\a', '\a', 
		'\x2', '\x2', '\x11C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\x5', '\x88', '\x45', '\x2', '\x11E', '\x11F', '\x5', '\x1E', '\x10', 
		'\x2', '\x11F', '\x120', '\x5', '\x1C', '\xF', '\x2', '\x120', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x122', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\x5', ' ', '\x11', '\x2', '\x125', '\x126', '\x5', '\x98', 'M', 
		'\x2', '\x126', '\x127', '\a', 'T', '\x2', '\x2', '\x127', '\x128', '\x5', 
		'$', '\x13', '\x2', '\x128', '\x129', '\a', '\a', '\x2', '\x2', '\x129', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12D', '\a', '\v', '\x2', 
		'\x2', '\x12B', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '!', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', '\n', 
		'\x2', '\x2', '\x12F', '\x130', '\a', 'T', '\x2', '\x2', '\x130', '\x131', 
		'\a', '\x5', '\x2', '\x2', '\x131', '\x132', '\x5', '\x1C', '\xF', '\x2', 
		'\x132', '\x133', '\a', '\x6', '\x2', '\x2', '\x133', '\x134', '\a', '\a', 
		'\x2', '\x2', '\x134', '#', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', 
		'\a', '\f', '\x2', '\x2', '\x136', '\x139', '\x5', '&', '\x14', '\x2', 
		'\x137', '\x139', '\x3', '\x2', '\x2', '\x2', '\x138', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13F', '\x5', '<', '\x1F', 
		'\x2', '\x13B', '\x13F', '\a', 'U', '\x2', '\x2', '\x13C', '\x13D', '\a', 
		'\r', '\x2', '\x2', '\x13D', '\x13F', '\a', '\xE', '\x2', '\x2', '\x13E', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\a', '\xF', '\x2', '\x2', '\x141', 
		'\x144', '\a', 'T', '\x2', '\x2', '\x142', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x140', '\x3', '\x2', '\x2', '\x2', '\x143', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x144', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x146', '\a', '\x10', '\x2', '\x2', '\x146', '\x149', '\a', 
		'T', '\x2', '\x2', '\x147', '\x149', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '+', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', 
		'\x11', '\x2', '\x2', '\x14B', '\x14C', '\a', 'T', '\x2', '\x2', '\x14C', 
		'\x14D', '\a', '\x5', '\x2', '\x2', '\x14D', '\x14E', '\x5', '.', '\x18', 
		'\x2', '\x14E', '\x14F', '\a', '\x6', '\x2', '\x2', '\x14F', '\x150', 
		'\a', '\a', '\x2', '\x2', '\x150', '-', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\a', 'U', '\x2', '\x2', '\x152', '\x153', '\x5', '\x30', '\x19', 
		'\x2', '\x153', '/', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\a', 
		'\x12', '\x2', '\x2', '\x155', '\x158', '\x5', '\x32', '\x1A', '\x2', 
		'\x156', '\x158', '\x3', '\x2', '\x2', '\x2', '\x157', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x156', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\a', 'U', '\x2', 
		'\x2', '\x15A', '\x15D', '\x5', '\x30', '\x19', '\x2', '\x15B', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x15F', '\a', 'T', '\x2', '\x2', '\x15F', 
		'\x160', '\a', '\f', '\x2', '\x2', '\x160', '\x161', '\x5', '\xB8', ']', 
		'\x2', '\x161', '\x162', '\a', '\x13', '\x2', '\x2', '\x162', '\x163', 
		'\x5', 'p', '\x39', '\x2', '\x163', '\x164', '\a', '\x14', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\a', '\x2', '\x2', '\x165', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x166', '\x167', '\a', '\x15', '\x2', '\x2', '\x167', '\x168', 
		'\x5', '\x98', 'M', '\x2', '\x168', '\x169', '\a', 'T', '\x2', '\x2', 
		'\x169', '\x16A', '\a', '\a', '\x2', '\x2', '\x16A', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x16B', '\x16C', '\a', 'T', '\x2', '\x2', '\x16C', '\x16D', 
		'\a', '\x16', '\x2', '\x2', '\x16D', '\x16E', '\a', 'T', '\x2', '\x2', 
		'\x16E', '\x16F', '\a', '\a', '\x2', '\x2', '\x16F', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x170', '\x171', '\a', '\x17', '\x2', '\x2', '\x171', '\x172', 
		'\x5', '\xA6', 'T', '\x2', '\x172', '\x173', '\a', 'T', '\x2', '\x2', 
		'\x173', '\x174', '\a', '\f', '\x2', '\x2', '\x174', '\x175', '\x5', '<', 
		'\x1F', '\x2', '\x175', '\x176', '\a', '\a', '\x2', '\x2', '\x176', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x17C', '\x5', '>', ' ', '\x2', 
		'\x178', '\x17C', '\x5', '@', '!', '\x2', '\x179', '\x17C', '\a', 'R', 
		'\x2', '\x2', '\x17A', '\x17C', '\a', '\x18', '\x2', '\x2', '\x17B', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '=', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17E', '\t', '\x2', '\x2', '\x2', '\x17E', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x180', '\t', '\x3', '\x2', '\x2', '\x180', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x182', '\a', '\x1E', '\x2', '\x2', '\x182', 
		'\x183', '\x5', '\x44', '#', '\x2', '\x183', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x184', '\x18B', '\x5', 'l', '\x37', '\x2', '\x185', '\x186', 
		'\a', '\f', '\x2', '\x2', '\x186', '\x187', '\x5', '\x46', '$', '\x2', 
		'\x187', '\x188', '\a', '\a', '\x2', '\x2', '\x188', '\x18B', '\x3', '\x2', 
		'\x2', '\x2', '\x189', '\x18B', '\a', '\a', '\x2', '\x2', '\x18A', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x18D', '\a', '\x5', '\x2', '\x2', '\x18D', 
		'\x18E', '\x5', 'H', '%', '\x2', '\x18E', '\x18F', '\a', '\x6', '\x2', 
		'\x2', '\x18F', '\x196', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', 
		'\a', '\r', '\x2', '\x2', '\x191', '\x192', '\x5', 'J', '&', '\x2', '\x192', 
		'\x193', '\a', '\xE', '\x2', '\x2', '\x193', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x194', '\x196', '\a', 'T', '\x2', '\x2', '\x195', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x190', '\x3', '\x2', '\x2', '\x2', '\x195', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x196', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x19E', '\a', '\x1F', '\x2', '\x2', '\x198', '\x199', 
		'\a', ' ', '\x2', '\x2', '\x199', '\x19E', '\x5', '\xBC', '_', '\x2', 
		'\x19A', '\x19B', '\a', 'T', '\x2', '\x2', '\x19B', '\x19E', '\x5', '\xBC', 
		'_', '\x2', '\x19C', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', 'I', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x1A4', '\a', '\x1F', '\x2', '\x2', '\x1A0', '\x1A1', '\a', 'T', '\x2', 
		'\x2', '\x1A1', '\x1A4', '\x5', '\xBC', '_', '\x2', '\x1A2', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', 'K', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\a', '!', '\x2', '\x2', '\x1A6', '\x1A7', '\x5', 'N', '(', '\x2', 
		'\x1A7', 'M', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x5', '\x62', 
		'\x32', '\x2', '\x1A9', '\x1AA', '\x5', 'Z', '.', '\x2', '\x1AA', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\x5', '\xB8', ']', '\x2', 
		'\x1AC', '\x1AD', '\x5', 'l', '\x37', '\x2', '\x1AD', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1B0', '\a', '\a', '\x2', '\x2', '\x1AF', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AB', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\a', '\"', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\x5', 'R', '*', '\x2', '\x1B3', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\x5', '\x62', '\x32', '\x2', '\x1B5', '\x1B6', '\x5', 
		'Z', '.', '\x2', '\x1B6', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1B8', '\x5', '\xB8', ']', '\x2', '\x1B8', '\x1B9', '\x5', 'l', '\x37', 
		'\x2', '\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', 'S', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\a', '#', 
		'\x2', '\x2', '\x1BD', '\x1BE', '\x5', 'V', ',', '\x2', '\x1BE', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C3', '\x5', 'Z', '.', '\x2', 
		'\x1C0', '\x1C3', '\x5', '\x80', '\x41', '\x2', '\x1C1', '\x1C3', '\x5', 
		'\x82', '\x42', '\x2', '\x1C2', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', 'W', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\a', 
		' ', '\x2', '\x2', '\x1C5', '\x1C6', '\x5', '\x62', '\x32', '\x2', '\x1C6', 
		'\x1C7', '\x5', 'Z', '.', '\x2', '\x1C7', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1CA', '\x5', 'Z', '.', '\x2', '\x1C9', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '$', '\x2', '\x2', 
		'\x1CC', '\x1CD', '\x5', '\x98', 'M', '\x2', '\x1CD', '\x1CE', '\x5', 
		'\\', '/', '\x2', '\x1CE', '\x1CF', '\a', '\a', '\x2', '\x2', '\x1CF', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', '\x5', '^', '\x30', 
		'\x2', '\x1D1', '\x1D3', '\a', 'T', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', 
		'\x2', '\x2', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', '\v', '\x2', 
		'\x2', '\x1D5', '_', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D9', '\a', 
		' ', '\x2', '\x2', '\x1D7', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D7', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DD', 
		'\a', '#', '\x2', '\x2', '\x1DB', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DB', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x63', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x1DF', '\x5', '\xB8', ']', '\x2', '\x1DF', '\x1E0', '\x5', 'l', '\x37', 
		'\x2', '\x1E0', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E3', 
		'\x5', '\x66', '\x34', '\x2', '\x1E2', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', 'j', '\x36', '\x2', '\x1E5', 
		'\x1E6', '\x5', 'h', '\x35', '\x2', '\x1E6', '\x1E7', '\x5', '\xB8', ']', 
		'\x2', '\x1E7', '\x1E8', '\x5', 'l', '\x37', '\x2', '\x1E8', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x5', 'j', '\x36', '\x2', '\x1EA', 
		'\x1EB', '\x5', 'h', '\x35', '\x2', '\x1EB', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1E9', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', 'i', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\t', '\x4', 
		'\x2', '\x2', '\x1F0', 'k', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\x5', 'n', '\x38', '\x2', '\x1F2', '\x1F3', '\a', '\x13', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\x5', 'p', '\x39', '\x2', '\x1F4', '\x1F5', '\a', '\x14', 
		'\x2', '\x2', '\x1F5', '\x1F6', '\a', '\a', '\x2', '\x2', '\x1F6', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FA', '\a', 'T', '\x2', '\x2', 
		'\x1F8', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x5', 't', ';', '\x2', 
		'\x1FC', '\x1FD', '\x5', 'r', ':', '\x2', '\x1FD', '\x200', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE', '\x200', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x200', 'q', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\a', '\x12', 
		'\x2', '\x2', '\x202', '\x203', '\x5', 't', ';', '\x2', '\x203', '\x204', 
		'\x5', 'r', ':', '\x2', '\x204', '\x207', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x207', '\x3', '\x2', '\x2', '\x2', '\x206', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x206', '\x205', '\x3', '\x2', '\x2', '\x2', '\x207', 
		's', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', '\x5', '\x88', '\x45', 
		'\x2', '\x209', '\x20A', '\x5', 'v', '<', '\x2', '\x20A', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', '(', '\x2', '\x2', '\x20C', 
		'\x20D', '\x5', '\x98', 'M', '\x2', '\x20D', '\x20E', '\x5', 'x', '=', 
		'\x2', '\x20E', '\x20F', '\x5', '$', '\x13', '\x2', '\x20F', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x5', '\x98', 'M', '\x2', 
		'\x211', '\x212', '\x5', 'z', '>', '\x2', '\x212', '\x213', '\x5', 'x', 
		'=', '\x2', '\x213', '\x215', '\x3', '\x2', '\x2', '\x2', '\x214', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x215', 'w', '\x3', '\x2', '\x2', '\x2', '\x216', '\x219', '\x5', '\x94', 
		'K', '\x2', '\x217', '\x219', '\a', 'T', '\x2', '\x2', '\x218', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '\x218', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x219', 'y', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21D', '\a', ')', 
		'\x2', '\x2', '\x21B', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '{', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\a', '*', 
		'\x2', '\x2', '\x21F', '\x220', '\a', '+', '\x2', '\x2', '\x220', '\x221', 
		'\x5', '\x98', 'M', '\x2', '\x221', '\x222', '\x5', '~', '@', '\x2', '\x222', 
		'\x223', '\a', ',', '\x2', '\x2', '\x223', '\x224', '\a', '\a', '\x2', 
		'\x2', '\x224', '}', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\a', 
		'\x12', '\x2', '\x2', '\x226', '\x229', '\x5', '\x98', 'M', '\x2', '\x227', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x228', '\x225', '\x3', '\x2', '\x2', 
		'\x2', '\x228', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\x5', '\x84', '\x43', '\x2', 
		'\x22B', '\x81', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', '\x5', 
		'\x86', '\x44', '\x2', '\x22D', '\x83', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x22F', '\a', '-', '\x2', '\x2', '\x22F', '\x230', '\a', '+', '\x2', 
		'\x2', '\x230', '\x231', '\x5', '\x98', 'M', '\x2', '\x231', '\x232', 
		'\a', '\x12', '\x2', '\x2', '\x232', '\x233', '\x5', '\x98', 'M', '\x2', 
		'\x233', '\x234', '\a', ',', '\x2', '\x2', '\x234', '\x235', '\a', '\a', 
		'\x2', '\x2', '\x235', '\x85', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', 
		'\a', '.', '\x2', '\x2', '\x237', '\x238', '\a', '+', '\x2', '\x2', '\x238', 
		'\x239', '\x5', '\x98', 'M', '\x2', '\x239', '\x23A', '\a', ',', '\x2', 
		'\x2', '\x23A', '\x23B', '\a', '\a', '\x2', '\x2', '\x23B', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x23C', '\x23D', '\a', '\r', '\x2', '\x2', '\x23D', 
		'\x23E', '\x5', '\x8C', 'G', '\x2', '\x23E', '\x23F', '\x5', '\x8A', '\x46', 
		'\x2', '\x23F', '\x240', '\a', '\xE', '\x2', '\x2', '\x240', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x242', '\x241', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '\x89', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x245', '\a', '\x12', '\x2', '\x2', '\x245', '\x246', '\x5', '\x8C', 
		'G', '\x2', '\x246', '\x247', '\x5', '\x8A', '\x46', '\x2', '\x247', '\x24A', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x24A', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x244', '\x3', '\x2', '\x2', '\x2', '\x249', '\x248', '\x3', 
		'\x2', '\x2', '\x2', '\x24A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x24B', 
		'\x24C', '\a', '\x13', '\x2', '\x2', '\x24C', '\x24D', '\x5', '\x90', 
		'I', '\x2', '\x24D', '\x24E', '\a', '\x14', '\x2', '\x2', '\x24E', '\x24F', 
		'\x5', '\x8E', 'H', '\x2', '\x24F', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x251', '\a', '\r', '\x2', '\x2', '\x251', '\x252', '\x5', '\x90', 
		'I', '\x2', '\x252', '\x253', '\a', '\xE', '\x2', '\x2', '\x253', '\x254', 
		'\x5', '\x8E', 'H', '\x2', '\x254', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x255', '\x256', '\a', '\x5', '\x2', '\x2', '\x256', '\x257', '\x5', 
		'\x90', 'I', '\x2', '\x257', '\x258', '\a', '\x6', '\x2', '\x2', '\x258', 
		'\x259', '\x5', '\x8E', 'H', '\x2', '\x259', '\x25E', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x25B', '\x5', '\x92', 'J', '\x2', '\x25B', '\x25C', 
		'\x5', '\x8E', 'H', '\x2', '\x25C', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x250', '\x3', 
		'\x2', '\x2', '\x2', '\x25D', '\x255', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x262', '\x5', '\x8C', 'G', '\x2', '\x260', '\x262', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x260', '\x3', '\x2', '\x2', '\x2', '\x262', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x263', '\x264', '\a', '\x13', '\x2', '\x2', '\x264', 
		'\x265', '\x5', '\x90', 'I', '\x2', '\x265', '\x266', '\a', '\x14', '\x2', 
		'\x2', '\x266', '\x267', '\x5', '\x90', 'I', '\x2', '\x267', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\a', '\r', '\x2', '\x2', 
		'\x269', '\x26A', '\x5', '\x90', 'I', '\x2', '\x26A', '\x26B', '\a', '\xE', 
		'\x2', '\x2', '\x26B', '\x26C', '\x5', '\x90', 'I', '\x2', '\x26C', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '\x5', '\x2', '\x2', 
		'\x26E', '\x26F', '\x5', '\x90', 'I', '\x2', '\x26F', '\x270', '\a', '\x6', 
		'\x2', '\x2', '\x270', '\x271', '\x5', '\x90', 'I', '\x2', '\x271', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x273', '\x5', '\x96', 'L', '\x2', 
		'\x273', '\x274', '\x5', '\x90', 'I', '\x2', '\x274', '\x277', '\x3', 
		'\x2', '\x2', '\x2', '\x275', '\x277', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x276', '\x268', '\x3', '\x2', '\x2', 
		'\x2', '\x276', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x276', '\x272', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x91', '\x3', '\x2', '\x2', '\x2', '\x278', '\x2A2', '\a', 'R', 
		'\x2', '\x2', '\x279', '\x2A2', '\a', 'S', '\x2', '\x2', '\x27A', '\x2A2', 
		'\a', 'T', '\x2', '\x2', '\x27B', '\x2A2', '\a', 'U', '\x2', '\x2', '\x27C', 
		'\x2A2', '\a', 'X', '\x2', '\x2', '\x27D', '\x2A2', '\a', '/', '\x2', 
		'\x2', '\x27E', '\x2A2', '\a', '\x1B', '\x2', '\x2', '\x27F', '\x2A2', 
		'\a', '\x30', '\x2', '\x2', '\x280', '\x2A2', '\a', ')', '\x2', '\x2', 
		'\x281', '\x2A2', '\a', '\xF', '\x2', '\x2', '\x282', '\x2A2', '\a', '\a', 
		'\x2', '\x2', '\x283', '\x2A2', '\a', '+', '\x2', '\x2', '\x284', '\x2A2', 
		'\a', '\f', '\x2', '\x2', '\x285', '\x2A2', '\a', ',', '\x2', '\x2', '\x286', 
		'\x2A2', '\a', '\x31', '\x2', '\x2', '\x287', '\x2A2', '\a', '\x32', '\x2', 
		'\x2', '\x288', '\x2A2', '\a', '\x33', '\x2', '\x2', '\x289', '\x2A2', 
		'\a', '\x34', '\x2', '\x2', '\x28A', '\x2A2', '\a', '\x1C', '\x2', '\x2', 
		'\x28B', '\x2A2', '\a', '\x1D', '\x2', '\x2', '\x28C', '\x2A2', '\a', 
		'\x35', '\x2', '\x2', '\x28D', '\x2A2', '\a', '\x36', '\x2', '\x2', '\x28E', 
		'\x2A2', '\a', '\x37', '\x2', '\x2', '\x28F', '\x2A2', '\a', '\x38', '\x2', 
		'\x2', '\x290', '\x2A2', '\a', '\x39', '\x2', '\x2', '\x291', '\x2A2', 
		'\a', ':', '\x2', '\x2', '\x292', '\x2A2', '\a', '\x1A', '\x2', '\x2', 
		'\x293', '\x2A2', '\a', ';', '\x2', '\x2', '\x294', '\x2A2', '\a', '<', 
		'\x2', '\x2', '\x295', '\x2A2', '\a', '\x18', '\x2', '\x2', '\x296', '\x2A2', 
		'\a', '=', '\x2', '\x2', '\x297', '\x2A2', '\a', '>', '\x2', '\x2', '\x298', 
		'\x2A2', '\a', '?', '\x2', '\x2', '\x299', '\x2A2', '\a', '(', '\x2', 
		'\x2', '\x29A', '\x2A2', '\a', '@', '\x2', '\x2', '\x29B', '\x2A2', '\a', 
		'\x41', '\x2', '\x2', '\x29C', '\x2A2', '\a', '\x19', '\x2', '\x2', '\x29D', 
		'\x2A2', '\a', '\x42', '\x2', '\x2', '\x29E', '\x2A2', '\a', '\x43', '\x2', 
		'\x2', '\x29F', '\x2A2', '\x5', '\x94', 'K', '\x2', '\x2A0', '\x2A2', 
		'\x5', '\xA4', 'S', '\x2', '\x2A1', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x279', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x27A', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x27E', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x27F', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x281', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x282', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x283', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x285', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x286', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x287', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x288', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x289', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x28A', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x28C', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x28D', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x28F', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x290', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x291', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x292', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x293', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x294', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x296', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'\x2A1', '\x299', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x29A', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x29C', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x29D', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x29F', 
		'\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A0', '\x3', '\x2', '\x2', '\x2', 
		'\x2A2', '\x93', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\t', '\x5', 
		'\x2', '\x2', '\x2A4', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A8', 
		'\x5', '\x92', 'J', '\x2', '\x2A6', '\x2A8', '\a', '\x12', '\x2', '\x2', 
		'\x2A7', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x97', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2AE', '\x5', '\x9A', 'N', '\x2', '\x2AA', '\x2AB', '\x5', '\x9C', 'O', 
		'\x2', '\x2AB', '\x2AC', '\x5', '\xB6', '\\', '\x2', '\x2AC', '\x2AE', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2A9', '\x3', '\x2', '\x2', '\x2', 
		'\x2AD', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2B2', '\x5', '\xA2', 'R', '\x2', '\x2B0', 
		'\x2B2', '\a', '\x37', '\x2', '\x2', '\x2B1', '\x2AF', '\x3', '\x2', '\x2', 
		'\x2', '\x2B1', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B4', '\a', '\x13', '\x2', '\x2', 
		'\x2B4', '\x2B5', '\x5', '\x9E', 'P', '\x2', '\x2B5', '\x2B6', '\a', '?', 
		'\x2', '\x2', '\x2B6', '\x2B7', '\x5', '\x9E', 'P', '\x2', '\x2B7', '\x2B8', 
		'\x5', '\xA0', 'Q', '\x2', '\x2B8', '\x2B9', '\a', '\x14', '\x2', '\x2', 
		'\x2B9', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BF', '\x5', 
		'\xA2', 'R', '\x2', '\x2BB', '\x2BC', '\x5', '\x9C', 'O', '\x2', '\x2BC', 
		'\x2BD', '\x5', '\xB6', '\\', '\x2', '\x2BD', '\x2BF', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BB', 
		'\x3', '\x2', '\x2', '\x2', '\x2BF', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\x2C1', '\a', '?', '\x2', '\x2', '\x2C1', '\x2C2', '\x5', '\x9E', 
		'P', '\x2', '\x2C2', '\x2C3', '\x5', '\xA0', 'Q', '\x2', '\x2C3', '\x2C6', 
		'\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2C5', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C4', '\x3', 
		'\x2', '\x2', '\x2', '\x2C6', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2C8', '\x5', '\xA8', 'U', '\x2', '\x2C8', '\x2C9', '\x5', '\xB6', '\\', 
		'\x2', '\x2C9', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', 
		'\x5', '\xB4', '[', '\x2', '\x2CB', '\x2CC', '\x5', '\xB6', '\\', '\x2', 
		'\x2CC', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\a', 
		'\x32', '\x2', '\x2', '\x2CE', '\x2EB', '\x5', '\xB6', '\\', '\x2', '\x2CF', 
		'\x2D0', '\a', '\x33', '\x2', '\x2', '\x2D0', '\x2EB', '\x5', '\xB6', 
		'\\', '\x2', '\x2D1', '\x2D2', '\a', '\x36', '\x2', '\x2', '\x2D2', '\x2EB', 
		'\x5', '\xB6', '\\', '\x2', '\x2D3', '\x2D4', '\a', 'T', '\x2', '\x2', 
		'\x2D4', '\x2EB', '\x5', '\xB6', '\\', '\x2', '\x2D5', '\x2D6', '\a', 
		'@', '\x2', '\x2', '\x2D6', '\x2D7', '\a', '+', '\x2', '\x2', '\x2D7', 
		'\x2D8', '\x5', '\x98', 'M', '\x2', '\x2D8', '\x2D9', '\a', ',', '\x2', 
		'\x2', '\x2D9', '\x2DA', '\x5', '\xB6', '\\', '\x2', '\x2DA', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\a', '=', '\x2', '\x2', 
		'\x2DC', '\x2EB', '\x5', '\xB6', '\\', '\x2', '\x2DD', '\x2DE', '\a', 
		'\x35', '\x2', '\x2', '\x2DE', '\x2EB', '\x5', '\xB6', '\\', '\x2', '\x2DF', 
		'\x2E0', '\a', '\x45', '\x2', '\x2', '\x2E0', '\x2EB', '\x5', '\xB6', 
		'\\', '\x2', '\x2E1', '\x2E2', '\x5', '\xA4', 'S', '\x2', '\x2E2', '\x2E3', 
		'\x5', '\xB6', '\\', '\x2', '\x2E3', '\x2EB', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E5', '\a', '\x34', '\x2', '\x2', '\x2E5', '\x2E6', '\a', 
		'+', '\x2', '\x2', '\x2E6', '\x2E7', '\x5', '\x98', 'M', '\x2', '\x2E7', 
		'\x2E8', '\a', ',', '\x2', '\x2', '\x2E8', '\x2E9', '\x5', '\xB6', '\\', 
		'\x2', '\x2E9', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2C7', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2EA', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2EA', 
		'\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2DD', 
		'\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2E4', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x2EC', 
		'\x2ED', '\t', '\x6', '\x2', '\x2', '\x2ED', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x2EE', '\x2EF', '\x5', '\xA8', 'U', '\x2', '\x2EF', '\x2F0', 
		'\x5', '\xB6', '\\', '\x2', '\x2F0', '\x2F4', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2F2', '\a', 'T', '\x2', '\x2', '\x2F2', '\x2F4', '\x5', '\xB6', 
		'\\', '\x2', '\x2F3', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x2F4', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x2F5', '\x2FB', '\x5', '\xAE', 'X', '\x2', '\x2F6', '\x2FB', '\x5', 
		'\xAA', 'V', '\x2', '\x2F7', '\x2FB', '\a', '\x38', '\x2', '\x2', '\x2F8', 
		'\x2FB', '\a', '\x39', '\x2', '\x2', '\x2F9', '\x2FB', '\a', '>', '\x2', 
		'\x2', '\x2FA', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F6', 
		'\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F7', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F9', '\x3', 
		'\x2', '\x2', '\x2', '\x2FB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x2FC', 
		'\x2FD', '\a', '\x44', '\x2', '\x2', '\x2FD', '\x300', '\x5', '\xAC', 
		'W', '\x2', '\x2FE', '\x300', '\x5', '\xAC', 'W', '\x2', '\x2FF', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', '\x2', 
		'\x300', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\t', '\a', 
		'\x2', '\x2', '\x302', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x303', '\x304', 
		'\a', '\x42', '\x2', '\x2', '\x304', '\x307', '\x5', '\xB0', 'Y', '\x2', 
		'\x305', '\x307', '\x5', '\xB0', 'Y', '\x2', '\x306', '\x303', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x305', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x308', '\x30C', '\a', '\x41', '\x2', 
		'\x2', '\x309', '\x30A', '\a', '<', '\x2', '\x2', '\x30A', '\x30C', '\x5', 
		'\xB2', 'Z', '\x2', '\x30B', '\x308', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x30C', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x30D', '\x310', '\a', '<', '\x2', '\x2', '\x30E', '\x310', '\x3', 
		'\x2', '\x2', '\x2', '\x30F', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30F', 
		'\x30E', '\x3', '\x2', '\x2', '\x2', '\x310', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x312', '\a', 'Q', '\x2', '\x2', '\x312', '\x313', '\a', 
		'+', '\x2', '\x2', '\x313', '\x314', '\x5', '\xB8', ']', '\x2', '\x314', 
		'\x315', '\a', ',', '\x2', '\x2', '\x315', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x316', '\x319', '\a', '\x31', '\x2', '\x2', '\x317', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x316', '\x3', '\x2', '\x2', '\x2', 
		'\x318', '\x317', '\x3', '\x2', '\x2', '\x2', '\x319', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x31D', '\x5', '\x98', 'M', '\x2', '\x31B', 
		'\x31D', '\a', '\x43', '\x2', '\x2', '\x31C', '\x31A', '\x3', '\x2', '\x2', 
		'\x2', '\x31C', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31D', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\a', 'T', '\x2', '\x2', 
		'\x31F', '\x320', '\x5', '\xBC', '_', '\x2', '\x320', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\x321', '\x322', '\a', '\x12', '\x2', '\x2', '\x322', '\x323', 
		'\a', 'T', '\x2', '\x2', '\x323', '\x326', '\x5', '\xBC', '_', '\x2', 
		'\x324', '\x326', '\x3', '\x2', '\x2', '\x2', '\x325', '\x321', '\x3', 
		'\x2', '\x2', '\x2', '\x325', '\x324', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x327', '\x328', '\a', 'T', '\x2', 
		'\x2', '\x328', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', 
		'\a', 'T', '\x2', '\x2', '\x32A', '\x32B', '\a', '\x13', '\x2', '\x2', 
		'\x32B', '\x32C', '\x5', 'p', '\x39', '\x2', '\x32C', '\x32D', '\a', '\x14', 
		'\x2', '\x2', '\x32D', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32F', 
		'\a', 'T', '\x2', '\x2', '\x32F', '\x330', '\a', '\f', '\x2', '\x2', '\x330', 
		'\x331', '\a', 'T', '\x2', '\x2', '\x331', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x333', '\a', 'T', '\x2', '\x2', '\x333', '\x334', '\a', 
		'\f', '\x2', '\x2', '\x334', '\x335', '\a', '\x13', '\x2', '\x2', '\x335', 
		'\x336', '\x5', '\xBA', '^', '\x2', '\x336', '\x337', '\a', '\x14', '\x2', 
		'\x2', '\x337', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', 
		'\a', 'T', '\x2', '\x2', '\x339', '\x33A', '\a', '\f', '\x2', '\x2', '\x33A', 
		'\x33B', '\a', 'T', '\x2', '\x2', '\x33B', '\x33C', '\a', '\x13', '\x2', 
		'\x2', '\x33C', '\x33D', '\x5', 'p', '\x39', '\x2', '\x33D', '\x33E', 
		'\a', '\x14', '\x2', '\x2', '\x33E', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		';', '\xD0', '\xD8', '\xDE', '\xE2', '\xF9', '\x107', '\x113', '\x122', 
		'\x12C', '\x138', '\x13E', '\x143', '\x148', '\x157', '\x15C', '\x17B', 
		'\x18A', '\x195', '\x19D', '\x1A3', '\x1AF', '\x1BA', '\x1C2', '\x1C9', 
		'\x1D2', '\x1D8', '\x1DC', '\x1E2', '\x1ED', '\x1F9', '\x1FF', '\x206', 
		'\x214', '\x218', '\x21C', '\x228', '\x242', '\x249', '\x25D', '\x261', 
		'\x276', '\x2A1', '\x2A7', '\x2AD', '\x2B1', '\x2BE', '\x2C5', '\x2EA', 
		'\x2F3', '\x2FA', '\x2FF', '\x306', '\x30B', '\x30F', '\x318', '\x31C', 
		'\x325',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
